diff --git a/schemas/sidebar.ts b/schemas/sidebar.ts
index b71d159ed44f89ef83298a7036a66edf25945f20..7706b3b25b0e62f2735f0cad61780f9c745b131b 100644
--- a/schemas/sidebar.ts
+++ b/schemas/sidebar.ts
@@ -49,6 +49,8 @@ const AutoSidebarGroupSchema = SidebarGroupSchema.extend({
 		// TODO: not supported by Docusaurus but would be good to have
 		/** How many directories deep to include from this directory in the sidebar. Default: `Infinity`. */
 		// depth: z.number().optional(),
+		sort: z.enum(['date']).optional(),
+		order: z.enum(['ascending','descending']).optional()
 	}),
 }).strict();
 export type AutoSidebarGroup = z.infer<typeof AutoSidebarGroupSchema>;
diff --git a/utils/navigation.ts b/utils/navigation.ts
index cd1475d15221caca34d03bfdc026f211b41e0c07..b72b230da9262f76e8e7573e5b8aeb59aaec01e4 100644
--- a/utils/navigation.ts
+++ b/utils/navigation.ts
@@ -96,7 +96,7 @@ function groupFromAutogenerateConfig(
 	routes: Route[],
 	currentPathname: string
 ): Group {
-	const { collapsed: subgroupCollapsed, directory } = item.autogenerate;
+	const { collapsed: subgroupCollapsed, directory, sort, order } = item.autogenerate;
 	const localeDir = locale ? locale + '/' + directory : directory;
 	const dirDocs = routes.filter(
 		(doc) =>
@@ -105,7 +105,8 @@ function groupFromAutogenerateConfig(
 			// Match against `foo/anything/else.md`.
 			doc.id.startsWith(localeDir + '/')
 	);
-	const tree = treeify(dirDocs, localeDir);
+	const sorted = !sort ? dirDocs : dirDocs.sort(sortHandler(sort, order)).map((doc, i) => {doc.entry.data.sidebar.order = i; return doc});
+	const tree = treeify(sorted, localeDir);
 	return {
 		type: 'group',
 		label: pickLang(item.translations, localeToLang(locale)) || item.label,
@@ -115,6 +116,13 @@ function groupFromAutogenerateConfig(
 	};
 }
 
+const sortHandler = (kind: 'date', order: 'ascending' | 'descending') => {
+	if (kind === 'date') {
+		if (order === 'ascending') return (docA: Route, docB: Route) => docA.entry.data.date! > docB.entry.data.date! ? 1 : -1
+		return (docA: Route, docB: Route) => docA.entry.data.date! < docB.entry.data.date! ? 1 : -1
+	}
+}
+
 /** Check if a string starts with one of `http://` or `https://`. */
 const isAbsolute = (link: string) => /^https?:\/\//.test(link);
 
