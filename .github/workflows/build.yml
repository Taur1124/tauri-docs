# Copyright 2019-2022 Tauri Programme within The Commons Conservancy
# SPDX-License-Identifier: Apache-2.0
# SPDX-License-Identifier: MIT

name: build

on:
  pull_request_target:
    branches: [dev]
  push:
    branches: [dev]

concurrency: crowdin_sync

env:
  LATEST_VERSION: v1

jobs:
  build-locale-list:
    runs-on: ubuntu-latest
    outputs:
      locale-list: ${{ steps.generate.outputs.locale-list }}
    steps:
      - name: Checkout site
        uses: actions/checkout@v3
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - uses: actions/setup-node@v3
        with:
          cache: 'yarn'
      - name: Setup yarn
        run: yarn install --frozen-lockfile
      - name: Generate i18n files
        run: yarn docusaurus write-translations
      - name: Upload i18n files
        if: ${{ github.event_name == 'push' }}
        env:
          CROWDIN_TOKEN: ${{ secrets.CROWDIN_TOKEN }}
        run: yarn crowdin upload
      - name: Download i18n files
        if: |
          github.event_name == 'push' ||
          (github.event_name == 'pull_request_target' &&
          github.event.pull_request.head.repo.full_name == github.repository)
        env:
          CROWDIN_TOKEN: ${{ secrets.CROWDIN_TOKEN }}
        run: yarn crowdin download
      - name: Get locales
        id: generate
        run: node ./.scripts/build.js
      - name: Save translations
        uses: actions/upload-artifact@v3
        with:
          name: i18n
          path: i18n
          if-no-files-found: error
      - name: Save config
        uses: actions/upload-artifact@v3
        with:
          name: config
          path: docusaurus.config.js
          if-no-files-found: error

  build-locales:
    needs: build-locale-list
    runs-on: ubuntu-latest
    strategy:
      matrix:
        locale: ${{ fromJson(needs.build-locale-list.outputs.locale-list) }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - name: Retrieve translations
        id: i18n
        uses: actions/download-artifact@v3
        with:
          name: i18n
          path: i18n
      - name: Retrieve config
        id: config
        uses: actions/download-artifact@v3
        with:
          name: config
      - uses: actions/setup-node@v3
        with:
          cache: 'yarn'
      - name: Setup yarn
        run: yarn install --frozen-lockfile
      - name: Build English locale
        if: matrix.locale == 'en'
        run: yarn build --locale ${{ matrix.locale }}
      - name: Build non-English locale
        if: matrix.locale != 'en'
        env:
          LOCALE: ${{ matrix.locale }}
        run: |
          # mv i18n/${{ matrix.locale }}/docusaurus-plugin-content-docs/current i18n/${{ matrix.locale }}/docusaurus-plugin-content-docs/$LATEST_VERSION
          yarn build --locale ${{ matrix.locale }} --out-dir ./build/${{ matrix.locale }}
      - name: Save build folder
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build
          if-no-files-found: error

  # deploy-to-netlify:
  #   needs: build-locales
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Retrieve build folder
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build
  #         path: build
  #     - name: Deploy to Netlify
  #       uses: nwtgck/actions-netlify@b7c1504e00c6b8a249d1848cc1b522a4865eed99
  #       with:
  #         publish-dir: './build'
  #         netlify-config-path: ./netlify.toml
  #         production-deploy: ${{ github.event_name == 'push' }}
  #         alias: deploy-preview-${{ github.event.number }}
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         deploy-message: 'Deploy from GitHub Actions'
  #         fails-without-credentials: true
  #         enable-commit-comment: false
  #       env:
  #         NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #         NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
