{"id":0,"name":"@tauri-apps/api","kind":1,"flags":{},"originalName":"","children":[{"id":1,"name":"app","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Get application metadata.","text":"This package is also accessible with `window.__TAURI__.app` when `tauri.conf.json > build > withGlobalTauri` is set to true."},"children":[{"id":2,"name":"getName","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"app.ts","line":33,"character":15}],"signatures":[{"id":3,"name":"getName","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the application name.","returns":"A promise resolving to application name.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":6,"name":"getTauriVersion","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"app.ts","line":47,"character":15}],"signatures":[{"id":7,"name":"getTauriVersion","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the tauri version.","returns":"A promise resolving to tauri version.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":4,"name":"getVersion","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"app.ts","line":19,"character":15}],"signatures":[{"id":5,"name":"getVersion","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the application version.","returns":"A promise resolving to the application version.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Functions","kind":64,"children":[2,6,4]}],"sources":[{"fileName":"app.ts","line":12,"character":0}]},{"id":8,"name":"bundle","kind":2,"kindString":"Module","flags":{},"children":[{"id":871,"name":"app","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":27,"character":2}],"target":1},{"id":872,"name":"cli","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":28,"character":2}],"target":14},{"id":873,"name":"clipboard","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":29,"character":2}],"target":29},{"id":874,"name":"dialog","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":30,"character":2}],"target":35},{"id":875,"name":"event","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":31,"character":2}],"target":66},{"id":876,"name":"fs","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":32,"character":2}],"target":81},{"id":877,"name":"globalShortcut","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":33,"character":2}],"target":160},{"id":878,"name":"http","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":34,"character":2}],"target":231},{"id":879,"name":"notification","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":35,"character":2}],"target":329},{"id":886,"name":"os","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":42,"character":2}],"target":342},{"id":880,"name":"path","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":36,"character":2}],"target":354},{"id":881,"name":"process","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":37,"character":2}],"target":417},{"id":882,"name":"shell","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":38,"character":2}],"target":423},{"id":883,"name":"tauri","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":39,"character":2}],"target":510},{"id":884,"name":"updater","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":40,"character":2}],"target":530},{"id":885,"name":"window","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":41,"character":2}],"target":546}],"groups":[{"title":"References","kind":16777216,"children":[871,872,873,874,875,876,877,878,879,886,880,881,882,883,884,885]}],"sources":[{"fileName":"bundle.ts","line":5,"character":0}]},{"id":14,"name":"cli","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Parse arguments from your Command Line Interface.","text":"This package is also accessible with `window.__TAURI__.cli` when `tauri.conf.json > build > withGlobalTauri` is set to true."},"children":[{"id":15,"name":"ArgMatch","kind":256,"kindString":"Interface","flags":{},"children":[{"id":17,"name":"occurrences","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Number of occurrences"},"sources":[{"fileName":"cli.ts","line":24,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":16,"name":"value","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"string if takes value\nboolean if flag\nstring[] or null if takes multiple values"},"sources":[{"fileName":"cli.ts","line":20,"character":2}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"boolean"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"groups":[{"title":"Properties","kind":1024,"children":[17,16]}],"sources":[{"fileName":"cli.ts","line":14,"character":10}]},{"id":21,"name":"CliMatches","kind":256,"kindString":"Interface","flags":{},"children":[{"id":22,"name":"args","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"cli.ts","line":33,"character":2}],"type":{"type":"reflection","declaration":{"id":23,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"indexSignature":{"id":24,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":25,"name":"name","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":15,"name":"ArgMatch"}}}}},{"id":26,"name":"subcommand","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"cli.ts","line":34,"character":2}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":18,"name":"SubcommandMatch"}]}}],"groups":[{"title":"Properties","kind":1024,"children":[22,26]}],"sources":[{"fileName":"cli.ts","line":32,"character":10}]},{"id":18,"name":"SubcommandMatch","kind":256,"kindString":"Interface","flags":{},"children":[{"id":20,"name":"matches","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"cli.ts","line":29,"character":2}],"type":{"type":"reference","id":21,"name":"CliMatches"}},{"id":19,"name":"name","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"cli.ts","line":28,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[20,19]}],"sources":[{"fileName":"cli.ts","line":27,"character":10}]},{"id":27,"name":"getMatches","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"cli.ts","line":42,"character":15}],"signatures":[{"id":28,"name":"getMatches","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Parse the arguments provided to the current process and get the matches using the configuration defined `tauri.conf.json > tauri > cli`.","returns":"A promise resolving to the parsed arguments.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":21,"name":"CliMatches"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[15,21,18]},{"title":"Functions","kind":64,"children":[27]}],"sources":[{"fileName":"cli.ts","line":12,"character":0}]},{"id":29,"name":"clipboard","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Read and write to the system clipboard.","text":"This package is also accessible with `window.__TAURI__.clipboard` when `tauri.conf.json > build > withGlobalTauri` is set to true."},"children":[{"id":33,"name":"readText","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"clipboard.ts","line":34,"character":15}],"signatures":[{"id":34,"name":"readText","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the clipboard content as plain text.","returns":"A promise resolving to the clipboard content as plain text.\n"},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":30,"name":"writeText","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"clipboard.ts","line":19,"character":15}],"signatures":[{"id":31,"name":"writeText","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Writes a plain text to the clipboard.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":32,"name":"text","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Functions","kind":64,"children":[33,30]}],"sources":[{"fileName":"clipboard.ts","line":12,"character":0}]},{"id":35,"name":"dialog","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Native system dialogs for opening and saving files.","text":"This package is also accessible with `window.__TAURI__.dialog` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"dialog\": {\n        \"all\": true, // enable all dialog APIs\n        \"open\": true, // enable file open API\n        \"save\": true // enable file save API\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."},"children":[{"id":36,"name":"DialogFilter","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Extension filters for the file dialog."},"children":[{"id":38,"name":"extensions","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Extensions to filter, without a `.` prefix.","tags":[{"tag":"example","text":"\n```typescript\nextensions: ['svg', 'png']\n```\n"}]},"sources":[{"fileName":"dialog.ts","line":41,"character":2}],"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":37,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Filter name."},"sources":[{"fileName":"dialog.ts","line":33,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[38,37]}],"sources":[{"fileName":"dialog.ts","line":31,"character":10}]},{"id":39,"name":"OpenDialogOptions","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Options for the open dialog."},"children":[{"id":42,"name":"defaultPath","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Initial directory or file path."},"sources":[{"fileName":"dialog.ts","line":51,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":44,"name":"directory","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the dialog is a directory selection or not."},"sources":[{"fileName":"dialog.ts","line":55,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":41,"name":"filters","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The filters of the dialog."},"sources":[{"fileName":"dialog.ts","line":49,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":36,"name":"DialogFilter"}}},{"id":43,"name":"multiple","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the dialog allows multiple selection or not."},"sources":[{"fileName":"dialog.ts","line":53,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":40,"name":"title","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The title of the dialog window."},"sources":[{"fileName":"dialog.ts","line":47,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[42,44,41,43,40]}],"sources":[{"fileName":"dialog.ts","line":45,"character":10}]},{"id":45,"name":"SaveDialogOptions","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Options for the save dialog."},"children":[{"id":48,"name":"defaultPath","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Initial directory or file path.\nIf it's a directory path, the dialog interface will change to that folder.\nIf it's not an existing directory, the file name will be set to the dialog's file name input and the dialog will be set to the parent folder."},"sources":[{"fileName":"dialog.ts","line":69,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":47,"name":"filters","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The filters of the dialog."},"sources":[{"fileName":"dialog.ts","line":63,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":36,"name":"DialogFilter"}}},{"id":46,"name":"title","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The title of the dialog window."},"sources":[{"fileName":"dialog.ts","line":61,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[48,47,46]}],"sources":[{"fileName":"dialog.ts","line":59,"character":10}]},{"id":58,"name":"ask","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"dialog.ts","line":137,"character":15}],"signatures":[{"id":59,"name":"ask","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Shows a question dialog with `Yes` and `No` buttons.","returns":"A promise resolving to a boolean indicating whether `Yes` was clicked or not.\n"},"parameters":[{"id":60,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The message to show."},"type":{"type":"intrinsic","name":"string"}},{"id":61,"name":"title","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The dialog's title. Defaults to the application name.\n"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":62,"name":"confirm","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"dialog.ts","line":156,"character":15}],"signatures":[{"id":63,"name":"confirm","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Shows a question dialog with `Ok` and `Cancel` buttons.","returns":"A promise resolving to a boolean indicating whether `Ok` was clicked or not.\n"},"parameters":[{"id":64,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The message to show."},"type":{"type":"intrinsic","name":"string"}},{"id":65,"name":"title","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The dialog's title. Defaults to the application name.\n"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":55,"name":"message","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"dialog.ts","line":119,"character":15}],"signatures":[{"id":56,"name":"message","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Shows a message dialog with an `Ok` button.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":57,"name":"message","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The message to show.\n"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":49,"name":"open","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"dialog.ts","line":77,"character":15}],"signatures":[{"id":50,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open a file/directory selection dialog","returns":"A promise resolving to the selected path(s)\n"},"parameters":[{"id":51,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":39,"name":"OpenDialogOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":52,"name":"save","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"dialog.ts","line":98,"character":15}],"signatures":[{"id":53,"name":"save","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Open a file/directory save dialog.","returns":"A promise resolving to the selected path.\n"},"parameters":[{"id":54,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":45,"name":"SaveDialogOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[36,39,45]},{"title":"Functions","kind":64,"children":[58,62,55,49,52]}],"sources":[{"fileName":"dialog.ts","line":28,"character":0}]},{"id":66,"name":"event","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"The event system allows you to emit events to the backend and listen to events from it.","text":"This package is also accessible with `window.__TAURI__.event` when `tauri.conf.json > build > withGlobalTauri` is set to true."},"children":[{"id":887,"name":"Event","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"event.ts","line":59,"character":14}],"target":182},{"id":889,"name":"EventCallback","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"event.ts","line":59,"character":32}],"target":189},{"id":888,"name":"EventName","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"event.ts","line":59,"character":21}],"target":188},{"id":890,"name":"UnlistenFn","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"event.ts","line":59,"character":47}],"target":194},{"id":77,"name":"emit","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"event.ts","line":55,"character":15}],"signatures":[{"id":78,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Emits an event to the backend.","returns":"\n"},"parameters":[{"id":79,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"intrinsic","name":"string"}},{"id":80,"name":"payload","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":67,"name":"listen","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"event.ts","line":27,"character":15}],"signatures":[{"id":68,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an event from the backend.","returns":"A promise resolving to a function to unlisten to the event.\n"},"typeParameter":[{"id":69,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":70,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"reference","id":188,"name":"EventName"}},{"id":71,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event handler callback."},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":69,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":194,"name":"UnlistenFn"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":72,"name":"once","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"event.ts","line":41,"character":15}],"signatures":[{"id":73,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an one-off event from the backend.","returns":"A promise resolving to a function to unlisten to the event.\n"},"typeParameter":[{"id":74,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":75,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"reference","id":188,"name":"EventName"}},{"id":76,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event handler callback."},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":74,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":194,"name":"UnlistenFn"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"References","kind":16777216,"children":[887,889,888,890]},{"title":"Functions","kind":64,"children":[77,67,72]}],"sources":[{"fileName":"event.ts","line":12,"character":0}]},{"id":81,"name":"fs","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Access the file system.","text":"This package is also accessible with `window.__TAURI__.fs` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"fs\": {\n        \"all\": true, // enable all FS APIs\n        \"readFile\": true,\n        \"writeFile\": true,\n        \"readDir\": true,\n        \"copyFile\": true,\n        \"createDir\": true,\n        \"removeDir\": true,\n        \"removeFile\": true,\n        \"renameFile\": true\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.\n\n## Security\n\nThis module prevents path traversal, not allowing absolute paths or parent dir components\n(i.e. \"/usr/path/to/file\" or \"../path/to/file\" paths are not allowed).\nPaths accessed with this API must be relative to one of the [[BaseDirectory | base directories]]\nso if you need access to arbitrary filesystem paths, you must write such logic on the core layer instead.\n\nThe API has a scope configuration that forces you to restrict the paths that can be accessed using glob patterns.\n\nThe scope configuration is an array of glob patterns describing folder paths that are allowed.\nFor instance, this scope configuration only allows accessing files on the\n*databases* folder of the [[path.appDir | $APP directory]]:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"fs\": {\n        \"scope\": [\"$APP/databases/*\"]\n      }\n    }\n  }\n}\n```\n\nNotice the use of the `$APP` variable. The value is injected at runtime, resolving to the [[path.appDir | app directory]].\nThe available variables are:\n[[path.audioDir | `$AUDIO`]], [[path.cacheDir | `$CACHE`]], [[path.configDir | `$CONFIG`]], [[path.dataDir | `$DATA`]],\n[[path.localDataDir | `$LOCALDATA`]], [[path.desktopDir | `$DESKTOP`]], [[path.documentDir | `$DOCUMENT`]],\n[[path.downloadDir | `$DOWNLOAD`]], [[path.executableDir | `$EXE`]], [[path.fontDir | `$FONT`]], [[path.homeDir | `$HOME`]],\n[[path.pictureDir | `$PICTURE`]], [[path.publicDir | `$PUBLIC`]], [[path.runtimeDir | `$RUNTIME`]],\n[[path.templateDir | `$TEMPLATE`]], [[path.videoDir | `$VIDEO`]], [[path.resourceDir | `$RESOURCE`]], [[path.appDir | `$APP`]].\n\nTrying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n\nNote that this scope applies to **all** APIs on this module.\n"},"children":[{"id":117,"name":"Dir","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"fs.ts","line":377,"character":19}],"target":82},{"id":82,"name":"BaseDirectory","kind":8,"kindString":"Enumeration","flags":{},"children":[{"id":100,"name":"App","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":91,"character":2}],"defaultValue":"18"},{"id":83,"name":"Audio","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":74,"character":2}],"defaultValue":"1"},{"id":84,"name":"Cache","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":75,"character":2}],"defaultValue":"2"},{"id":85,"name":"Config","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":76,"character":2}],"defaultValue":"3"},{"id":86,"name":"Data","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":77,"character":2}],"defaultValue":"4"},{"id":88,"name":"Desktop","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":79,"character":2}],"defaultValue":"6"},{"id":89,"name":"Document","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":80,"character":2}],"defaultValue":"7"},{"id":90,"name":"Download","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":81,"character":2}],"defaultValue":"8"},{"id":91,"name":"Executable","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":82,"character":2}],"defaultValue":"9"},{"id":92,"name":"Font","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":83,"character":2}],"defaultValue":"10"},{"id":93,"name":"Home","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":84,"character":2}],"defaultValue":"11"},{"id":87,"name":"LocalData","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":78,"character":2}],"defaultValue":"5"},{"id":101,"name":"Log","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":92,"character":2}],"defaultValue":"19"},{"id":94,"name":"Picture","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":85,"character":2}],"defaultValue":"12"},{"id":95,"name":"Public","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":86,"character":2}],"defaultValue":"13"},{"id":99,"name":"Resource","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":90,"character":2}],"defaultValue":"17"},{"id":96,"name":"Runtime","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":87,"character":2}],"defaultValue":"14"},{"id":97,"name":"Template","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":88,"character":2}],"defaultValue":"15"},{"id":98,"name":"Video","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"fs.ts","line":89,"character":2}],"defaultValue":"16"}],"groups":[{"title":"Enumeration members","kind":16,"children":[100,83,84,85,86,88,89,90,91,92,93,87,101,94,95,99,96,97,98]}],"sources":[{"fileName":"fs.ts","line":73,"character":12}]},{"id":113,"name":"FileEntry","kind":256,"kindString":"Interface","flags":{},"children":[{"id":116,"name":"children","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Children of this entry if it's a directory; null otherwise"},"sources":[{"fileName":"fs.ts","line":128,"character":2}],"type":{"type":"array","elementType":{"type":"reference","id":113,"name":"FileEntry"}}},{"id":115,"name":"name","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Name of the directory/file\ncan be null if the path terminates with `..`"},"sources":[{"fileName":"fs.ts","line":126,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":114,"name":"path","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"fs.ts","line":121,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[116,115,114]}],"sources":[{"fileName":"fs.ts","line":120,"character":10}]},{"id":110,"name":"FsBinaryFileOption","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Options object used to write a binary data to a file."},"children":[{"id":112,"name":"contents","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The byte array contents."},"sources":[{"fileName":"fs.ts","line":117,"character":2}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"qualifiedName":"Iterable","package":"typescript","name":"Iterable"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"qualifiedName":"ArrayLike","package":"typescript","name":"ArrayLike"}]}},{"id":111,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Path to the file to write."},"sources":[{"fileName":"fs.ts","line":115,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[112,111]}],"sources":[{"fileName":"fs.ts","line":113,"character":10}]},{"id":104,"name":"FsDirOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":105,"name":"dir","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"fs.ts","line":100,"character":2}],"type":{"type":"reference","id":82,"name":"BaseDirectory"}},{"id":106,"name":"recursive","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"fs.ts","line":101,"character":2}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[105,106]}],"sources":[{"fileName":"fs.ts","line":99,"character":10}]},{"id":102,"name":"FsOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":103,"name":"dir","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"fs.ts","line":96,"character":2}],"type":{"type":"reference","id":82,"name":"BaseDirectory"}}],"groups":[{"title":"Properties","kind":1024,"children":[103]}],"sources":[{"fileName":"fs.ts","line":95,"character":10}]},{"id":107,"name":"FsTextFileOption","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Options object used to write a UTF-8 string to a file."},"children":[{"id":109,"name":"contents","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The UTF-8 string to write to the file."},"sources":[{"fileName":"fs.ts","line":109,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":108,"name":"path","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Path to the file to write."},"sources":[{"fileName":"fs.ts","line":107,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[109,108]}],"sources":[{"fileName":"fs.ts","line":105,"character":10}]},{"id":146,"name":"copyFile","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"fs.ts","line":307,"character":15}],"signatures":[{"id":147,"name":"copyFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Copys a file to a destination.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":148,"name":"source","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"A path of the file to copy."},"type":{"type":"intrinsic","name":"string"}},{"id":149,"name":"destination","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"A path for the destination file."},"type":{"type":"intrinsic","name":"string"}},{"id":150,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Configuration object."},"type":{"type":"reference","id":102,"name":"FsOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":138,"name":"createDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"fs.ts","line":263,"character":15}],"signatures":[{"id":139,"name":"createDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a directory.\nIf one of the path's parent components doesn't exist\nand the `recursive` option isn't set to true, the promise will be rejected.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":140,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Path to the directory to create."},"type":{"type":"intrinsic","name":"string"}},{"id":141,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Configuration object."},"type":{"type":"reference","id":104,"name":"FsDirOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":122,"name":"readBinaryFile","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"fs.ts","line":159,"character":15}],"signatures":[{"id":123,"name":"readBinaryFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Reads a file as byte array.","returns":"A promise resolving to the file bytes array.\n"},"parameters":[{"id":124,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Path to the file."},"type":{"type":"intrinsic","name":"string"}},{"id":125,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Configuration object."},"type":{"type":"reference","id":102,"name":"FsOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","qualifiedName":"Uint8Array","package":"typescript","name":"Uint8Array"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":134,"name":"readDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"fs.ts","line":240,"character":15}],"signatures":[{"id":135,"name":"readDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"List directory files.","returns":"A promise resolving to the directory entries.\n"},"parameters":[{"id":136,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Path to the directory to read."},"type":{"type":"intrinsic","name":"string"}},{"id":137,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Configuration object."},"type":{"type":"reference","id":104,"name":"FsDirOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":113,"name":"FileEntry"}}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":118,"name":"readTextFile","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"fs.ts","line":138,"character":15}],"signatures":[{"id":119,"name":"readTextFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Reads a file as an UTF-8 encoded string.","returns":"A promise resolving to the file content as a UTF-8 encoded string.\n"},"parameters":[{"id":120,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Path to the file."},"type":{"type":"intrinsic","name":"string"}},{"id":121,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Configuration object."},"type":{"type":"reference","id":102,"name":"FsOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":142,"name":"removeDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"fs.ts","line":285,"character":15}],"signatures":[{"id":143,"name":"removeDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Removes a directory.\nIf the directory is not empty and the `recursive` option isn't set to true, the promise will be rejected.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":144,"name":"dir","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Path to the directory to remove."},"type":{"type":"intrinsic","name":"string"}},{"id":145,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Configuration object."},"type":{"type":"reference","id":104,"name":"FsDirOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":151,"name":"removeFile","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"fs.ts","line":330,"character":15}],"signatures":[{"id":152,"name":"removeFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Removes a file.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":153,"name":"file","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Path to the file to remove."},"type":{"type":"intrinsic","name":"string"}},{"id":154,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Configuration object."},"type":{"type":"reference","id":102,"name":"FsOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":155,"name":"renameFile","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"fs.ts","line":352,"character":15}],"signatures":[{"id":156,"name":"renameFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Renames a file.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":157,"name":"oldPath","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"A path of the file to rename."},"type":{"type":"intrinsic","name":"string"}},{"id":158,"name":"newPath","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"A path of the new file name."},"type":{"type":"intrinsic","name":"string"}},{"id":159,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Configuration object."},"type":{"type":"reference","id":102,"name":"FsOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":130,"name":"writeBinaryFile","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"fs.ts","line":211,"character":15}],"signatures":[{"id":131,"name":"writeBinaryFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Writes a byte array content to a file.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":132,"name":"file","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Write configuration object."},"type":{"type":"reference","id":110,"name":"FsBinaryFileOption"}},{"id":133,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Configuration object."},"type":{"type":"reference","id":102,"name":"FsOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":126,"name":"writeFile","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"fs.ts","line":182,"character":15}],"signatures":[{"id":127,"name":"writeFile","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Writes a UTF-8 text file.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":128,"name":"file","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"File configuration object."},"type":{"type":"reference","id":107,"name":"FsTextFileOption"}},{"id":129,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Configuration object."},"type":{"type":"reference","id":102,"name":"FsOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"References","kind":16777216,"children":[117]},{"title":"Enumerations","kind":8,"children":[82]},{"title":"Interfaces","kind":256,"children":[113,110,104,102,107]},{"title":"Functions","kind":64,"children":[146,138,122,134,118,142,151,155,130,126]}],"sources":[{"fileName":"fs.ts","line":71,"character":0}]},{"id":160,"name":"globalShortcut","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Register global shortcuts.","text":"This package is also accessible with `window.__TAURI__.globalShortcut` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"globalShortcut\": {\n        \"all\": true // enable all global shortcut APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."},"children":[{"id":161,"name":"ShortcutHandler","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"globalShortcut.ts","line":29,"character":12}],"type":{"type":"reflection","declaration":{"id":162,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"globalShortcut.ts","line":29,"character":30}],"signatures":[{"id":163,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":164,"name":"shortcut","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"id":173,"name":"isRegistered","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"globalShortcut.ts","line":79,"character":15}],"signatures":[{"id":174,"name":"isRegistered","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Determines whether the given shortcut is registered by this application or not.","returns":"A promise resolving to the state.\n"},"parameters":[{"id":175,"name":"shortcut","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Array of shortcut definitions, modifiers and key separated by \"+\" e.g. CmdOrControl+Q"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":165,"name":"register","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"globalShortcut.ts","line":38,"character":15}],"signatures":[{"id":166,"name":"register","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a global shortcut.","returns":"\n"},"parameters":[{"id":167,"name":"shortcut","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q"},"type":{"type":"intrinsic","name":"string"}},{"id":168,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Shortcut handler callback - takes the triggered shortcut as argument"},"type":{"type":"reference","id":161,"name":"ShortcutHandler"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":169,"name":"registerAll","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"globalShortcut.ts","line":59,"character":15}],"signatures":[{"id":170,"name":"registerAll","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Register a collection of global shortcuts.","returns":"\n"},"parameters":[{"id":171,"name":"shortcuts","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Array of shortcut definitions, modifiers and key separated by \"+\" e.g. CmdOrControl+Q"},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"id":172,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Shortcut handler callback - takes the triggered shortcut as argument"},"type":{"type":"reference","id":161,"name":"ShortcutHandler"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":176,"name":"unregister","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"globalShortcut.ts","line":95,"character":15}],"signatures":[{"id":177,"name":"unregister","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregister a global shortcut.","returns":"\n"},"parameters":[{"id":178,"name":"shortcut","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":179,"name":"unregisterAll","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"globalShortcut.ts","line":110,"character":15}],"signatures":[{"id":180,"name":"unregisterAll","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unregisters all shortcuts registered by the application.","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Type aliases","kind":4194304,"children":[161]},{"title":"Functions","kind":64,"children":[173,165,169,176,179]}],"sources":[{"fileName":"globalShortcut.ts","line":26,"character":0}]},{"id":181,"name":"helpers/event","kind":2,"kindString":"Module","flags":{},"children":[{"id":182,"name":"Event","kind":256,"kindString":"Interface","flags":{},"children":[{"id":183,"name":"event","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Event name"},"sources":[{"fileName":"helpers/event.ts","line":12,"character":2}],"type":{"type":"reference","id":188,"name":"EventName"}},{"id":185,"name":"id","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Event identifier used to unlisten"},"sources":[{"fileName":"helpers/event.ts","line":16,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":186,"name":"payload","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Event payload"},"sources":[{"fileName":"helpers/event.ts","line":18,"character":2}],"type":{"type":"reference","id":187,"name":"T"}},{"id":184,"name":"windowLabel","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The label of the window that emitted this event."},"sources":[{"fileName":"helpers/event.ts","line":14,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[183,185,186,184]}],"sources":[{"fileName":"helpers/event.ts","line":10,"character":17}],"typeParameter":[{"id":187,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}]},{"id":189,"name":"EventCallback","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"helpers/event.ts","line":39,"character":12}],"typeParameter":[{"id":193,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"type":{"type":"reflection","declaration":{"id":190,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"helpers/event.ts","line":39,"character":31}],"signatures":[{"id":191,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":192,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":182,"typeArguments":[{"type":"reference","id":193,"name":"T"}],"name":"Event"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"id":188,"name":"EventName","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"helpers/event.ts","line":21,"character":12}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"tauri://update"},{"type":"literal","value":"tauri://update-available"},{"type":"literal","value":"tauri://update-install"},{"type":"literal","value":"tauri://update-status"},{"type":"literal","value":"tauri://resize"},{"type":"literal","value":"tauri://move"},{"type":"literal","value":"tauri://close-requested"},{"type":"literal","value":"tauri://focus"},{"type":"literal","value":"tauri://blur"},{"type":"literal","value":"tauri://scale-change"},{"type":"literal","value":"tauri://menu"},{"type":"literal","value":"tauri://file-drop"},{"type":"literal","value":"tauri://file-drop-hover"},{"type":"literal","value":"tauri://file-drop-cancelled"}]},{"type":"intrinsic","name":"string"}],"qualifiedName":"LiteralUnion","package":"type-fest","name":"LiteralUnion"}},{"id":194,"name":"UnlistenFn","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"helpers/event.ts","line":41,"character":12}],"type":{"type":"reflection","declaration":{"id":195,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"helpers/event.ts","line":41,"character":25}],"signatures":[{"id":196,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}},{"id":197,"name":"emit","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"helpers/event.ts","line":68,"character":15}],"signatures":[{"id":198,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Emits an event to the backend.","returns":"\n"},"parameters":[{"id":199,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"intrinsic","name":"string"}},{"id":200,"name":"windowLabel","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"id":201,"name":"payload","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":202,"name":"listen","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"helpers/event.ts","line":91,"character":15}],"signatures":[{"id":203,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an event from the backend.","returns":"A promise resolving to a function to unlisten to the event.\n"},"typeParameter":[{"id":204,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":205,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"reference","id":188,"name":"EventName"}},{"id":206,"name":"windowLabel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":207,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event handler callback."},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":204,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":194,"name":"UnlistenFn"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":208,"name":"once","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"helpers/event.ts","line":116,"character":15}],"signatures":[{"id":209,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an one-off event from the backend.","returns":"A promise resolving to a function to unlisten to the event.\n"},"typeParameter":[{"id":210,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":211,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"reference","id":188,"name":"EventName"}},{"id":212,"name":"windowLabel","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":213,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event handler callback."},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":210,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":194,"name":"UnlistenFn"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[182]},{"title":"Type aliases","kind":4194304,"children":[189,188,194]},{"title":"Functions","kind":64,"children":[197,202,208]}],"sources":[{"fileName":"helpers/event.ts","line":5,"character":0}]},{"id":214,"name":"helpers/os-check","kind":2,"kindString":"Module","flags":{},"children":[{"id":219,"name":"isMacOS","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"helpers/os-check.ts","line":15,"character":9}],"signatures":[{"id":220,"name":"isMacOS","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"boolean"}}]},{"id":217,"name":"isWindows","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"helpers/os-check.ts","line":11,"character":9}],"signatures":[{"id":218,"name":"isWindows","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"boolean"}}]}],"groups":[{"title":"Functions","kind":64,"children":[219,217]}],"sources":[{"fileName":"helpers/os-check.ts","line":7,"character":0}]},{"id":221,"name":"helpers/tauri","kind":2,"kindString":"Module","flags":{},"children":[{"id":223,"name":"TauriCommand","kind":256,"kindString":"Interface","flags":{},"children":[{"id":224,"name":"__tauriModule","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"helpers/tauri.ts","line":27,"character":2}],"type":{"type":"reference","id":222,"name":"TauriModule"}}],"groups":[{"title":"Properties","kind":1024,"children":[224]}],"sources":[{"fileName":"helpers/tauri.ts","line":26,"character":10}],"indexSignature":{"id":225,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":226,"name":"key","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"unknown"}}},{"id":222,"name":"TauriModule","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"helpers/tauri.ts","line":9,"character":5}],"type":{"type":"union","types":[{"type":"literal","value":"App"},{"type":"literal","value":"Fs"},{"type":"literal","value":"Path"},{"type":"literal","value":"Os"},{"type":"literal","value":"Window"},{"type":"literal","value":"Shell"},{"type":"literal","value":"Event"},{"type":"literal","value":"Internal"},{"type":"literal","value":"Dialog"},{"type":"literal","value":"Cli"},{"type":"literal","value":"Notification"},{"type":"literal","value":"Http"},{"type":"literal","value":"GlobalShortcut"},{"type":"literal","value":"Process"},{"type":"literal","value":"Clipboard"}]}},{"id":227,"name":"invokeTauriCommand","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"helpers/tauri.ts","line":31,"character":15}],"signatures":[{"id":228,"name":"invokeTauriCommand","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":229,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":230,"name":"command","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":223,"name":"TauriCommand"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":229,"name":"T"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[223]},{"title":"Type aliases","kind":4194304,"children":[222]},{"title":"Functions","kind":64,"children":[227]}],"sources":[{"fileName":"helpers/tauri.ts","line":7,"character":0}]},{"id":231,"name":"http","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Access the HTTP client written in Rust.","text":"This package is also accessible with `window.__TAURI__.http` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"http\": {\n        \"all\": true, // enable all http APIs\n        \"request\": true // enable HTTP request API\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.\n\n## Security\n\nThis API has a scope configuration that forces you to restrict the URLs and paths that can be accessed using glob patterns.\n\nFor instance, this scope configuration only allows making HTTP requests to the GitHub API for the `tauri-apps` organization:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"http\": {\n        \"scope\": [\"https://api.github.com/repos/tauri-apps/*\"]\n      }\n    }\n  }\n}\n```\nTrying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n"},"children":[{"id":324,"name":"ResponseType","kind":8,"kindString":"Enumeration","flags":{},"children":[{"id":327,"name":"Binary","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"http.ts","line":56,"character":2}],"defaultValue":"3"},{"id":325,"name":"JSON","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"http.ts","line":54,"character":2}],"defaultValue":"1"},{"id":326,"name":"Text","kind":16,"kindString":"Enumeration member","flags":{},"sources":[{"fileName":"http.ts","line":55,"character":2}],"defaultValue":"2"}],"groups":[{"title":"Enumeration members","kind":16,"children":[327,325,326]}],"sources":[{"fileName":"http.ts","line":53,"character":5}]},{"id":255,"name":"Body","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"The body object to be used on POST and PUT requests."},"children":[{"id":273,"name":"payload","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"http.ts","line":64,"character":2}],"type":{"type":"intrinsic","name":"unknown"}},{"id":272,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"http.ts","line":63,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":265,"name":"bytes","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"http.ts","line":119,"character":9}],"signatures":[{"id":266,"name":"bytes","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a new byte array body.","returns":"The body object ready to be used on the POST and PUT requests.\n"},"parameters":[{"id":267,"name":"bytes","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","qualifiedName":"Uint8Array","package":"typescript","name":"Uint8Array"}}],"type":{"type":"reference","id":255,"name":"Body"}}]},{"id":256,"name":"form","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"http.ts","line":79,"character":9}],"signatures":[{"id":257,"name":"form","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a new form data body.","returns":"The body object ready to be used on the POST and PUT requests.\n"},"parameters":[{"id":258,"name":"data","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The body data.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","id":235,"name":"Part"}],"qualifiedName":"Record","package":"typescript","name":"Record"}}],"type":{"type":"reference","id":255,"name":"Body"}}]},{"id":259,"name":"json","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"http.ts","line":97,"character":9}],"signatures":[{"id":260,"name":"json","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a new JSON body.","returns":"The body object ready to be used on the POST and PUT requests.\n"},"parameters":[{"id":261,"name":"data","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The body JSON object.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"qualifiedName":"Record","package":"typescript","name":"Record"}}],"type":{"type":"reference","id":255,"name":"Body"}}]},{"id":262,"name":"text","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"http.ts","line":108,"character":9}],"signatures":[{"id":263,"name":"text","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a new UTF-8 string body.","returns":"The body object ready to be used on the POST and PUT requests.\n"},"parameters":[{"id":264,"name":"value","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":255,"name":"Body"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[273,272]},{"title":"Methods","kind":2048,"children":[265,256,259,262]}],"sources":[{"fileName":"http.ts","line":62,"character":6}]},{"id":274,"name":"Client","kind":128,"kindString":"Class","flags":{},"children":[{"id":278,"name":"id","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"http.ts","line":189,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":307,"name":"delete","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"http.ts","line":333,"character":8}],"signatures":[{"id":308,"name":"delete","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Makes a DELETE request.","returns":"A promise resolving to the response.\n"},"typeParameter":[{"id":309,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":310,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The request URL."},"type":{"type":"intrinsic","name":"string"}},{"id":311,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The request options."},"type":{"type":"reference","id":245,"name":"RequestOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":312,"typeArguments":[{"type":"reference","id":309,"name":"T"}],"name":"Response"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":279,"name":"drop","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"http.ts","line":200,"character":8}],"signatures":[{"id":280,"name":"drop","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Drops the client instance.","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":285,"name":"get","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"http.ts","line":261,"character":8}],"signatures":[{"id":286,"name":"get","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Makes a GET request.","returns":"A promise resolving to the response.\n"},"typeParameter":[{"id":287,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":288,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The request URL."},"type":{"type":"intrinsic","name":"string"}},{"id":289,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The request options."},"type":{"type":"reference","id":245,"name":"RequestOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":312,"typeArguments":[{"type":"reference","id":287,"name":"T"}],"name":"Response"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":302,"name":"patch","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"http.ts","line":318,"character":8}],"signatures":[{"id":303,"name":"patch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Makes a PATCH request.","returns":"A promise resolving to the response.\n"},"typeParameter":[{"id":304,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":305,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The request URL."},"type":{"type":"intrinsic","name":"string"}},{"id":306,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The request options."},"type":{"type":"reference","id":245,"name":"RequestOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":312,"typeArguments":[{"type":"reference","id":304,"name":"T"}],"name":"Response"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":290,"name":"post","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"http.ts","line":277,"character":8}],"signatures":[{"id":291,"name":"post","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Makes a POST request.","returns":"A promise resolving to the response.\n"},"typeParameter":[{"id":292,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":293,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The request URL."},"type":{"type":"intrinsic","name":"string"}},{"id":294,"name":"body","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The body of the request."},"type":{"type":"reference","id":255,"name":"Body"}},{"id":295,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The request options."},"type":{"type":"reference","id":245,"name":"RequestOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":312,"typeArguments":[{"type":"reference","id":292,"name":"T"}],"name":"Response"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":296,"name":"put","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"http.ts","line":298,"character":8}],"signatures":[{"id":297,"name":"put","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Makes a PUT request.","returns":"A promise resolving to the response.\n"},"typeParameter":[{"id":298,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":299,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The request URL."},"type":{"type":"intrinsic","name":"string"}},{"id":300,"name":"body","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The body of the request."},"type":{"type":"reference","id":255,"name":"Body"}},{"id":301,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Request options."},"type":{"type":"reference","id":245,"name":"RequestOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":312,"typeArguments":[{"type":"reference","id":298,"name":"T"}],"name":"Response"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":281,"name":"request","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"http.ts","line":216,"character":8}],"signatures":[{"id":282,"name":"request","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Makes an HTTP request.","returns":"A promise resolving to the response.\n"},"typeParameter":[{"id":283,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":284,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The request options."},"type":{"type":"reference","id":237,"name":"HttpOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":312,"typeArguments":[{"type":"reference","id":283,"name":"T"}],"name":"Response"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Properties","kind":1024,"children":[278]},{"title":"Methods","kind":2048,"children":[307,279,285,302,290,296,281]}],"sources":[{"fileName":"http.ts","line":188,"character":6}]},{"id":312,"name":"Response","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"Response object."},"children":[{"id":322,"name":"data","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The response data."},"sources":[{"fileName":"http.ts","line":175,"character":2}],"type":{"type":"reference","name":"T"}},{"id":320,"name":"headers","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The response headers."},"sources":[{"fileName":"http.ts","line":171,"character":2}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"qualifiedName":"Record","package":"typescript","name":"Record"}},{"id":319,"name":"ok","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"A boolean indicating whether the response was successful (status in the range 200–299) or not."},"sources":[{"fileName":"http.ts","line":169,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":321,"name":"rawHeaders","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The response raw headers."},"sources":[{"fileName":"http.ts","line":173,"character":2}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"qualifiedName":"Record","package":"typescript","name":"Record"}},{"id":318,"name":"status","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The response status code."},"sources":[{"fileName":"http.ts","line":167,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":317,"name":"url","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The request URL."},"sources":[{"fileName":"http.ts","line":165,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[322,320,319,321,318,317]}],"sources":[{"fileName":"http.ts","line":163,"character":6}],"typeParameter":[{"id":323,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}]},{"id":232,"name":"ClientOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":234,"name":"connectTimeout","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"http.ts","line":50,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":233,"name":"maxRedirections","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"http.ts","line":49,"character":2}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[234,233]}],"sources":[{"fileName":"http.ts","line":48,"character":10}]},{"id":237,"name":"HttpOptions","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Options object sent to the backend."},"children":[{"id":242,"name":"body","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"http.ts","line":143,"character":2}],"type":{"type":"reference","id":255,"name":"Body"}},{"id":240,"name":"headers","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"http.ts","line":141,"character":2}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"qualifiedName":"Record","package":"typescript","name":"Record"}},{"id":238,"name":"method","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"http.ts","line":139,"character":2}],"type":{"type":"reference","id":236,"name":"HttpVerb"}},{"id":241,"name":"query","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"http.ts","line":142,"character":2}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"qualifiedName":"Record","package":"typescript","name":"Record"}},{"id":244,"name":"responseType","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"http.ts","line":145,"character":2}],"type":{"type":"reference","id":324,"name":"ResponseType"}},{"id":243,"name":"timeout","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"http.ts","line":144,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":239,"name":"url","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"http.ts","line":140,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[242,240,238,241,244,243,239]}],"sources":[{"fileName":"http.ts","line":138,"character":10}]},{"id":246,"name":"FetchOptions","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Options for the `fetch` API."},"sources":[{"fileName":"http.ts","line":151,"character":5}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":237,"name":"HttpOptions"},{"type":"literal","value":"url"}],"qualifiedName":"Omit","package":"typescript","name":"Omit"}},{"id":236,"name":"HttpVerb","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"The request HTTP verb."},"sources":[{"fileName":"http.ts","line":126,"character":5}],"type":{"type":"union","types":[{"type":"literal","value":"GET"},{"type":"literal","value":"POST"},{"type":"literal","value":"PUT"},{"type":"literal","value":"DELETE"},{"type":"literal","value":"PATCH"},{"type":"literal","value":"HEAD"},{"type":"literal","value":"OPTIONS"},{"type":"literal","value":"CONNECT"},{"type":"literal","value":"TRACE"}]}},{"id":235,"name":"Part","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"http.ts","line":59,"character":5}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","qualifiedName":"Uint8Array","package":"typescript","name":"Uint8Array"}]}},{"id":245,"name":"RequestOptions","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Request options."},"sources":[{"fileName":"http.ts","line":149,"character":5}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":237,"name":"HttpOptions"},{"type":"union","types":[{"type":"literal","value":"method"},{"type":"literal","value":"url"}]}],"qualifiedName":"Omit","package":"typescript","name":"Omit"}},{"id":250,"name":"fetch","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"http.ts","line":369,"character":15}],"signatures":[{"id":251,"name":"fetch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Perform an HTTP request using the default client.","returns":"The response object.\n"},"typeParameter":[{"id":252,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":253,"name":"url","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The request URL."},"type":{"type":"intrinsic","name":"string"}},{"id":254,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The fetch options."},"type":{"type":"reference","id":246,"name":"FetchOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":312,"typeArguments":[{"type":"reference","id":252,"name":"T"}],"name":"Response"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":247,"name":"getClient","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"http.ts","line":349,"character":15}],"signatures":[{"id":248,"name":"getClient","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a new client using the specified options.","returns":"A promise resolving to the client instance.\n"},"parameters":[{"id":249,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Client configuration.\n"},"type":{"type":"reference","id":232,"name":"ClientOptions"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":274,"name":"Client"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Enumerations","kind":8,"children":[324]},{"title":"Classes","kind":128,"children":[255,274,312]},{"title":"Interfaces","kind":256,"children":[232,237]},{"title":"Type aliases","kind":4194304,"children":[246,236,235,245]},{"title":"Functions","kind":64,"children":[250,247]}],"sources":[{"fileName":"http.ts","line":46,"character":0}]},{"id":328,"name":"index","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"The Tauri API allows you to interface with the backend layer.","text":"This module exposes all other modules as an object where the key is the module name, and the value is the module exports.","tags":[{"tag":"example","text":"\n```typescript\nimport { app, dialog, event, fs, globalShortcut } from '@tauri-apps/api'\n```"}]},"children":[{"id":891,"name":"app","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":27,"character":2}],"target":871},{"id":892,"name":"cli","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":28,"character":2}],"target":872},{"id":893,"name":"clipboard","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":29,"character":2}],"target":873},{"id":894,"name":"dialog","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":30,"character":2}],"target":874},{"id":895,"name":"event","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":31,"character":2}],"target":875},{"id":896,"name":"fs","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":32,"character":2}],"target":876},{"id":897,"name":"globalShortcut","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":33,"character":2}],"target":877},{"id":898,"name":"http","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":34,"character":2}],"target":878},{"id":899,"name":"notification","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":35,"character":2}],"target":879},{"id":906,"name":"os","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":42,"character":2}],"target":886},{"id":900,"name":"path","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":36,"character":2}],"target":880},{"id":901,"name":"process","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":37,"character":2}],"target":881},{"id":902,"name":"shell","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":38,"character":2}],"target":882},{"id":903,"name":"tauri","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":39,"character":2}],"target":883},{"id":904,"name":"updater","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":40,"character":2}],"target":884},{"id":905,"name":"window","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"bundle.ts","line":41,"character":2}],"target":885}],"groups":[{"title":"References","kind":16777216,"children":[891,892,893,894,895,896,897,898,899,906,900,901,902,903,904,905]}],"sources":[{"fileName":"index.ts","line":16,"character":0}]},{"id":329,"name":"notification","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Send toast notifications (brief auto-expiring OS window element) to your user.\nCan also be used with the Notification Web API.","text":"This package is also accessible with `window.__TAURI__.notification` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"notification\": {\n        \"all\": true // enable all notification APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."},"children":[{"id":330,"name":"Options","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Options to send a notification."},"children":[{"id":332,"name":"body","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Optional notification body."},"sources":[{"fileName":"notification.ts","line":36,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":333,"name":"icon","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Optional notification icon."},"sources":[{"fileName":"notification.ts","line":38,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":331,"name":"title","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Notification title."},"sources":[{"fileName":"notification.ts","line":34,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[332,333,331]}],"sources":[{"fileName":"notification.ts","line":32,"character":10}]},{"id":334,"name":"Permission","kind":4194304,"kindString":"Type alias","flags":{},"comment":{"shortText":"Possible permission values."},"sources":[{"fileName":"notification.ts","line":42,"character":5}],"type":{"type":"union","types":[{"type":"literal","value":"granted"},{"type":"literal","value":"denied"},{"type":"literal","value":"default"}]}},{"id":340,"name":"isPermissionGranted","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"notification.ts","line":49,"character":15}],"signatures":[{"id":341,"name":"isPermissionGranted","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks if the permission to send notifications is granted.","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"literal","value":null}]}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":338,"name":"requestPermission","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"notification.ts","line":66,"character":15}],"signatures":[{"id":339,"name":"requestPermission","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Requests the permission to send notifications.","returns":"A promise resolving to whether the user granted the permission or not.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":334,"name":"Permission"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":335,"name":"sendNotification","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"notification.ts","line":75,"character":9}],"signatures":[{"id":336,"name":"sendNotification","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sends a notification to the user."},"parameters":[{"id":337,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Notification options.\n"},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","id":330,"name":"Options"}]}}],"type":{"type":"intrinsic","name":"void"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[330]},{"title":"Type aliases","kind":4194304,"children":[334]},{"title":"Functions","kind":64,"children":[340,338,335]}],"sources":[{"fileName":"notification.ts","line":27,"character":0}]},{"id":342,"name":"os","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Provides operating system-related utility methods and properties.","text":"This package is also accessible with `window.__TAURI__.os` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"os\": {\n        \"all\": true, // enable all Os APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."},"children":[{"id":343,"name":"EOL","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"The operating system-specific end-of-line marker.\n- `\\n` on POSIX\n- `\\r\\n` on Windows"},"sources":[{"fileName":"os.ts","line":35,"character":6}],"type":{"type":"union","types":[{"type":"literal","value":"\r\n"},{"type":"literal","value":"\n"}]},"defaultValue":"..."},{"id":350,"name":"arch","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"os.ts","line":93,"character":15}],"signatures":[{"id":351,"name":"arch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the operating system CPU architecture for which the tauri app was compiled. Possible values are `'x86'`, `'x86_64'`, `'arm'`, `'aarch64'`, `'mips'`, `'mips64'`, `'powerpc'`, `'powerpc64'`, `'riscv64'`, `'s390x'`, `'sparc64'`"},"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"x86"},{"type":"literal","value":"x86_64"},{"type":"literal","value":"arm"},{"type":"literal","value":"aarch64"},{"type":"literal","value":"mips"},{"type":"literal","value":"mips64"},{"type":"literal","value":"powerpc"},{"type":"literal","value":"powerpc64"},{"type":"literal","value":"riscv64"},{"type":"literal","value":"s390x"},{"type":"literal","value":"sparc64"}]},{"type":"intrinsic","name":"string"}],"qualifiedName":"LiteralUnion","package":"type-fest","name":"LiteralUnion"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":344,"name":"platform","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"os.ts","line":41,"character":15}],"signatures":[{"id":345,"name":"platform","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a string identifying the operating system platform.\nThe value is set at compile time. Possible values are `'linux'`, `'darwin'`, `'ios'`, `'freebsd'`, `'dragonfly'`, `'netbsd'`, `'openbsd'`, `'solaris'`, `'android'`, `'win32'`"},"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"linux"},{"type":"literal","value":"darwin"},{"type":"literal","value":"ios"},{"type":"literal","value":"freebsd"},{"type":"literal","value":"dragonfly"},{"type":"literal","value":"netbsd"},{"type":"literal","value":"openbsd"},{"type":"literal","value":"solaris"},{"type":"literal","value":"android"},{"type":"literal","value":"win32"}]},{"type":"intrinsic","name":"string"}],"qualifiedName":"LiteralUnion","package":"type-fest","name":"LiteralUnion"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":352,"name":"tempdir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"os.ts","line":120,"character":15}],"signatures":[{"id":353,"name":"tempdir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the operating system's default directory for temporary files as a string."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":348,"name":"type","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"os.ts","line":79,"character":15}],"signatures":[{"id":349,"name":"type","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns `'Linux'` on Linux, `'Darwin'` on macOS, and `'Windows_NT'` on Windows."},"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"Linux"},{"type":"literal","value":"Darwin"},{"type":"literal","value":"Windows_NT"}]},{"type":"intrinsic","name":"string"}],"qualifiedName":"LiteralUnion","package":"type-fest","name":"LiteralUnion"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":346,"name":"version","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"os.ts","line":67,"character":15}],"signatures":[{"id":347,"name":"version","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns a string identifying the kernel version."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Variables","kind":32,"children":[343]},{"title":"Functions","kind":64,"children":[350,344,352,348,346]}],"sources":[{"fileName":"os.ts","line":26,"character":0}]},{"id":354,"name":"path","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"The path module provides utilities for working with file and directory paths.","text":"This package is also accessible with `window.__TAURI__.path` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"path\": {\n        \"all\": true, // enable all Path APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."},"children":[{"id":908,"name":"BaseDirectory","kind":16777216,"kindString":"Reference","flags":{},"sources":[{"fileName":"path.ts","line":566,"character":2}],"target":82},{"id":394,"name":"delimiter","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Provides the platform-specific path segment delimiter:\n- `;` on Windows\n- `:` on POSIX"},"sources":[{"fileName":"path.ts","line":449,"character":6}],"type":{"type":"union","types":[{"type":"literal","value":";"},{"type":"literal","value":":"}]},"defaultValue":"..."},{"id":393,"name":"sep","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"Provides the platform-specific path segment separator:\n- `\\` on Windows\n- `/` on POSIX"},"sources":[{"fileName":"path.ts","line":442,"character":6}],"type":{"type":"union","types":[{"type":"literal","value":"\\"},{"type":"literal","value":"/"}]},"defaultValue":"..."},{"id":355,"name":"appDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":36,"character":15}],"signatures":[{"id":356,"name":"appDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the suggested directory for your app config files.\nResolves to `${configDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value configured on `tauri.conf.json > tauri > bundle > identifier`.","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":357,"name":"audioDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":58,"character":15}],"signatures":[{"id":358,"name":"audioDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's audio directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_MUSIC_DIR`.\n- **macOS:** Resolves to `$HOME/Music`.\n- **Windows:** Resolves to `{FOLDERID_Music}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":410,"name":"basename","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":525,"character":15}],"signatures":[{"id":411,"name":"basename","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":" Returns the last portion of a `path`. Trailing directory separators are ignored."},"parameters":[{"id":412,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":413,"name":"ext","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"An optional file extension to be removed from the returned path.\n"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":359,"name":"cacheDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":80,"character":15}],"signatures":[{"id":360,"name":"cacheDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's cache directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_CACHE_HOME` or `$HOME/.cache`.\n- **macOS:** Resolves to `$HOME/Library/Caches`.\n- **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":361,"name":"configDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":102,"character":15}],"signatures":[{"id":362,"name":"configDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's config directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_CONFIG_HOME` or `$HOME/.config`.\n- **macOS:** Resolves to `$HOME/Library/Application Support`.\n- **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":363,"name":"dataDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":124,"character":15}],"signatures":[{"id":364,"name":"dataDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's data directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n- **macOS:** Resolves to `$HOME/Library/Application Support`.\n- **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":365,"name":"desktopDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":146,"character":15}],"signatures":[{"id":366,"name":"desktopDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's desktop directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DESKTOP_DIR`.\n- **macOS:** Resolves to `$HOME/Library/Desktop`.\n- **Windows:** Resolves to `{FOLDERID_Desktop}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":404,"name":"dirname","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":497,"character":15}],"signatures":[{"id":405,"name":"dirname","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the directory name of a `path`. Trailing directory separators are ignored."},"parameters":[{"id":406,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":367,"name":"documentDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":168,"character":15}],"signatures":[{"id":368,"name":"documentDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's document directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOCUMENTS_DIR`.\n- **macOS:** Resolves to `$HOME/Documents`.\n- **Windows:** Resolves to `{FOLDERID_Documents}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":369,"name":"downloadDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":190,"character":15}],"signatures":[{"id":370,"name":"downloadDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's download directory.","text":"#### Platform-specific\n\n- **Linux**: Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOWNLOAD_DIR`.\n- **macOS**: Resolves to `$HOME/Downloads`.\n- **Windows**: Resolves to `{FOLDERID_Downloads}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":371,"name":"executableDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":212,"character":15}],"signatures":[{"id":372,"name":"executableDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's executable directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_BIN_HOME/../bin` or `$XDG_DATA_HOME/../bin` or `$HOME/.local/bin`.\n- **macOS:** Not supported.\n- **Windows:** Not supported.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":407,"name":"extname","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":510,"character":15}],"signatures":[{"id":408,"name":"extname","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the extension of the `path`."},"parameters":[{"id":409,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":373,"name":"fontDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":234,"character":15}],"signatures":[{"id":374,"name":"fontDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's font directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_DATA_HOME/fonts` or `$HOME/.local/share/fonts`.\n- **macOS:** Resolves to `$HOME/Library/Fonts`.\n- **Windows:** Not supported.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":375,"name":"homeDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":256,"character":15}],"signatures":[{"id":376,"name":"homeDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's home directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to `$HOME`.\n- **macOS:** Resolves to `$HOME`.\n- **Windows:** Resolves to `{FOLDERID_Profile}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":414,"name":"isAbsolute","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":536,"character":15}],"signatures":[{"id":415,"name":"isAbsolute","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":416,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":401,"name":"join","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":484,"character":15}],"signatures":[{"id":402,"name":"join","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":" Joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path."},"parameters":[{"id":403,"name":"paths","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"comment":{"shortText":"A sequence of path segments.\n"},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":377,"name":"localDataDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":278,"character":15}],"signatures":[{"id":378,"name":"localDataDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's local data directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n- **macOS:** Resolves to `$HOME/Library/Application Support`.\n- **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":391,"name":"logDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":426,"character":15}],"signatures":[{"id":392,"name":"logDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the suggested log directory.","text":"### Platform-specific\n\n- **Linux:** Resolves to `${configDir}/${bundleIdentifier}`.\n- **macOS:** Resolves to `${homeDir}//Library/Logs/{bundleIdentifier}`\n- **Windows:** Resolves to `${configDir}/${bundleIdentifier}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":398,"name":"normalize","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":469,"character":15}],"signatures":[{"id":399,"name":"normalize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Normalizes the given `path`, resolving `'..'` and `'.'` segments and resolve symolic links."},"parameters":[{"id":400,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":379,"name":"pictureDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":300,"character":15}],"signatures":[{"id":380,"name":"pictureDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's picture directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PICTURES_DIR`.\n- **macOS:** Resolves to `$HOME/Pictures`.\n- **Windows:** Resolves to `{FOLDERID_Pictures}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":381,"name":"publicDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":322,"character":15}],"signatures":[{"id":382,"name":"publicDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's public directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PUBLICSHARE_DIR`.\n- **macOS:** Resolves to `$HOME/Public`.\n- **Windows:** Resolves to `{FOLDERID_Public}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":395,"name":"resolve","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":456,"character":15}],"signatures":[{"id":396,"name":"resolve","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resolves a sequence of `paths` or `path` segments into an absolute path."},"parameters":[{"id":397,"name":"paths","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"comment":{"shortText":"A sequence of paths or path segments.\n"},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":383,"name":"resourceDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":338,"character":15}],"signatures":[{"id":384,"name":"resourceDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's resource directory.","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":385,"name":"runtimeDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":360,"character":15}],"signatures":[{"id":386,"name":"runtimeDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's runtime directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_RUNTIME_DIR`.\n- **macOS:** Not supported.\n- **Windows:** Not supported.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":387,"name":"templateDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":382,"character":15}],"signatures":[{"id":388,"name":"templateDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's template directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_TEMPLATES_DIR`.\n- **macOS:** Not supported.\n- **Windows:** Resolves to `{FOLDERID_Templates}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":389,"name":"videoDir","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"path.ts","line":404,"character":15}],"signatures":[{"id":390,"name":"videoDir","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the path to the user's video directory.","text":"#### Platform-specific\n\n- **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_VIDEOS_DIR`.\n- **macOS:** Resolves to `$HOME/Movies`.\n- **Windows:** Resolves to `{FOLDERID_Videos}`.\n","returns":"\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"References","kind":16777216,"children":[908]},{"title":"Variables","kind":32,"children":[394,393]},{"title":"Functions","kind":64,"children":[355,357,410,359,361,363,365,404,367,369,371,407,373,375,414,401,377,391,398,379,381,395,383,385,387,389]}],"sources":[{"fileName":"path.ts","line":26,"character":0}]},{"id":417,"name":"process","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Perform operations on the current process.","text":"This package is also accessible with `window.__TAURI__.process` when `tauri.conf.json > build > withGlobalTauri` is set to true."},"children":[{"id":418,"name":"exit","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"process.ts","line":20,"character":15}],"signatures":[{"id":419,"name":"exit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Exits immediately with the given `exitCode`.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":420,"name":"exitCode","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The exit code to use."},"type":{"type":"intrinsic","name":"number"},"defaultValue":"0"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":421,"name":"relaunch","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"process.ts","line":35,"character":15}],"signatures":[{"id":422,"name":"relaunch","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Exits the current instance of the app then relaunches it.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Functions","kind":64,"children":[418,421]}],"sources":[{"fileName":"process.ts","line":12,"character":0}]},{"id":423,"name":"shell","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Access the system shell.\nAllows you to spawn child processes and manage files and URLs using their default application.","text":"This package is also accessible with `window.__TAURI__.shell` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"shell\": {\n        \"all\": true, // enable all shell APIs\n        \"execute\": true, // enable process spawn APIs\n        \"sidecar\": true, // enable spawning sidecars\n        \"open\": true // enable opening files/URLs using the default program\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.\n\n## Security\n\nThis API has a scope configuration that forces you to restrict the programs and arguments that can be used.\n\n### Restricting access to the [[`open`]] API\n\nOn the allowlist, `open: true` means that the [[open]] API can be used with any URL,\nas the argument is validated with the `^https?://` regex.\nYou can change that regex by changing the boolean value to a string, e.g. `open: ^https://github.com/`.\n\n### Restricting access to the [[`Command`]] APIs\n\nThe `shell` allowlist object has a `scope` field that defines an array of CLIs that can be used.\nEach CLI is a configuration object `{ name: string, command: string, sidecar?: bool, args?: boolean | Arg[] }`.\n\n- `name`: the unique identifier of the command, passed to the [[Command.constructor | Command constructor]].\nIf it's a sidecar, this must be the value defined on `tauri.conf.json > tauri > bundle > externalBin`.\n- `command`: the program that is executed on this configuration. If it's a sidecar, it must be the same as `name`.\n- `sidecar`: whether the object configures a sidecar or a system program.\n- `args`: the arguments that can be passed to the program. By default no arguments are allowed.\n  - `true` means that any argument list is allowed.\n  - `false` means that no arguments are allowed.\n  - otherwise an array can be configured. Each item is either a string representing the fixed argument value\n    or a `{ validator: string }` that defines a regex validating the argument value.\n\n#### Example scope configuration\n\nCLI: `git commit -m \"the commit message\"`\n\nConfiguration:\n```json\n{\n  \"scope\": {\n    \"name\": \"run-git-commit\",\n    \"command\": \"git\",\n    \"args\": [\"commit\", \"-m\", { \"validator\": \"\\\\S+\" }]\n  }\n}\n```\nUsage:\n```typescript\nimport { Command } from '@tauri-apps/api/shell'\nnew Command('run-git-commit', ['commit', '-m', 'the commit message'])\n```\n\nTrying to execute any API with a program not configured on the scope results in a promise rejection due to denied access.\n"},"children":[{"id":455,"name":"Child","kind":128,"kindString":"Class","flags":{},"children":[{"id":456,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"shell.ts","line":183,"character":2}],"signatures":[{"id":457,"name":"new Child","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":458,"name":"pid","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":455,"name":"Child"}}]},{"id":459,"name":"pid","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The child process `pid`."},"sources":[{"fileName":"shell.ts","line":181,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":463,"name":"kill","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"shell.ts","line":218,"character":8}],"signatures":[{"id":464,"name":"kill","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Kills the child process.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":460,"name":"write","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"shell.ts","line":201,"character":8}],"signatures":[{"id":461,"name":"write","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Writes `data` to the `stdin`.","returns":"A promise indicating the success or failure of the operation.\n","tags":[{"tag":"example","text":"\n```typescript\nconst command = new Command('node')\nconst child = await command.spawn()\nawait child.write('message')\nawait child.write([0, 1, 2, 3, 4, 5])\n```\n"}]},"parameters":[{"id":462,"name":"data","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The message to write, either a string or a byte array."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","qualifiedName":"Uint8Array","package":"typescript","name":"Uint8Array"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[456]},{"title":"Properties","kind":1024,"children":[459]},{"title":"Methods","kind":2048,"children":[463,460]}],"sources":[{"fileName":"shell.ts","line":179,"character":6}]},{"id":424,"name":"Command","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"The entry point for spawning child processes.\nIt emits the `close` and `error` events.","tags":[{"tag":"example","text":"\n```typescript\nconst command = new Command('node')\ncommand.on('close', data => {\n  console.log(`command finished with code ${data.code} and signal ${data.signal}`)\n})\ncommand.on('error', error => console.error(`command error: \"${error}\"`))\ncommand.stdout.on('data', line => console.log(`command stdout: \"${line}\"`))\ncommand.stderr.on('data', line => console.log(`command stderr: \"${line}\"`))\n\nconst child = await command.spawn()\nconsole.log('pid:', child.pid)\n```\n"}]},"children":[{"id":430,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"shell.ts","line":266,"character":2}],"signatures":[{"id":431,"name":"new Command","kind":16384,"kindString":"Constructor signature","flags":{},"comment":{"shortText":"Creates a new `Command` instance."},"parameters":[{"id":432,"name":"program","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The program name to execute.\nIt must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`."},"type":{"type":"intrinsic","name":"string"}},{"id":433,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Program arguments."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"defaultValue":"[]"},{"id":434,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Spawn options.\n"},"type":{"type":"reference","id":504,"name":"SpawnOptions"}}],"type":{"type":"reference","id":424,"name":"Command"},"overwrites":{"type":"reference","id":467,"name":"EventEmitter.constructor"}}],"overwrites":{"type":"reference","id":466,"name":"EventEmitter.constructor"}},{"id":439,"name":"stderr","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Event emitter for the `stderr`. Emits the `data` event."},"sources":[{"fileName":"shell.ts","line":256,"character":11}],"type":{"type":"reference","id":465,"typeArguments":[{"type":"literal","value":"data"}],"name":"EventEmitter"},"defaultValue":"..."},{"id":438,"name":"stdout","kind":1024,"kindString":"Property","flags":{"isReadonly":true},"comment":{"shortText":"Event emitter for the `stdout`. Emits the `data` event."},"sources":[{"fileName":"shell.ts","line":254,"character":11}],"type":{"type":"reference","id":465,"typeArguments":[{"type":"literal","value":"data"}],"name":"EventEmitter"},"defaultValue":"..."},{"id":442,"name":"execute","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"shell.ts","line":343,"character":8}],"signatures":[{"id":443,"name":"execute","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Executes the command as a child process, waiting for it to finish and collecting all of its output.","returns":"A promise resolving to the child process output.\n","tags":[{"tag":"example","text":"\n```typescript\nconst output = await new Command('echo', 'message').execute()\nassert(output.code === 0)\nassert(output.signal === null)\nassert(output.stdout === 'message')\nassert(output.stderr === '')\n```\n"}]},"type":{"type":"reference","typeArguments":[{"type":"reference","id":499,"name":"ChildProcess"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":448,"name":"on","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"shell.ts","line":173,"character":2}],"signatures":[{"id":449,"name":"on","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an event from the child process.","returns":"The `this` instance for chained calls.\n"},"parameters":[{"id":450,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The event name."},"type":{"type":"union","types":[{"type":"literal","value":"close"},{"type":"literal","value":"error"}]}},{"id":451,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The event handler.\n"},"type":{"type":"reflection","declaration":{"id":452,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":453,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":454,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","id":465,"typeArguments":[{"type":"union","types":[{"type":"literal","value":"close"},{"type":"literal","value":"error"}]}],"name":"EventEmitter"},"inheritedFrom":{"type":"reference","id":488,"name":"EventEmitter.on"}}],"inheritedFrom":{"type":"reference","id":487,"name":"EventEmitter.on"}},{"id":440,"name":"spawn","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"shell.ts","line":306,"character":8}],"signatures":[{"id":441,"name":"spawn","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Executes the command as a child process, returning a handle to it.","returns":"A promise resolving to the child process handle.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":455,"name":"Child"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":425,"name":"sidecar","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"shell.ts","line":291,"character":9}],"signatures":[{"id":426,"name":"sidecar","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a command to execute the given sidecar program.","returns":"\n","tags":[{"tag":"example","text":"\n```typescript\nconst command = Command.sidecar('my-sidecar')\nconst output = await command.execute()\n```\n"}]},"parameters":[{"id":427,"name":"program","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The program to execute.\nIt must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`."},"type":{"type":"intrinsic","name":"string"}},{"id":428,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Program arguments."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"defaultValue":"[]"},{"id":429,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Spawn options."},"type":{"type":"reference","id":504,"name":"SpawnOptions"}}],"type":{"type":"reference","id":424,"name":"Command"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[430]},{"title":"Properties","kind":1024,"children":[439,438]},{"title":"Methods","kind":2048,"children":[442,448,440,425]}],"sources":[{"fileName":"shell.ts","line":246,"character":6}],"extendedTypes":[{"type":"reference","id":465,"typeArguments":[{"type":"union","types":[{"type":"literal","value":"close"},{"type":"literal","value":"error"}]}],"name":"EventEmitter"}]},{"id":465,"name":"EventEmitter","kind":128,"kindString":"Class","flags":{},"children":[{"id":466,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":467,"name":"new EventEmitter","kind":16384,"kindString":"Constructor signature","flags":{},"typeParameter":[{"id":468,"name":"E","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":465,"typeArguments":[{"type":"reference","id":468,"name":"E"}],"name":"EventEmitter"}}]},{"id":487,"name":"on","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"shell.ts","line":173,"character":2}],"signatures":[{"id":488,"name":"on","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an event from the child process.","returns":"The `this` instance for chained calls.\n"},"parameters":[{"id":489,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The event name."},"type":{"type":"reference","id":468,"name":"E"}},{"id":490,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The event handler.\n"},"type":{"type":"reflection","declaration":{"id":491,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":492,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":493,"name":"arg","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","id":465,"typeArguments":[{"type":"reference","id":468,"name":"E"}],"name":"EventEmitter"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[466]},{"title":"Methods","kind":2048,"children":[487]}],"sources":[{"fileName":"shell.ts","line":136,"character":6}],"typeParameter":[{"id":494,"name":"E","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"extendedBy":[{"type":"reference","id":424,"name":"Command"}]},{"id":499,"name":"ChildProcess","kind":256,"kindString":"Interface","flags":{},"children":[{"id":500,"name":"code","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Exit code of the process. `null` if the process was terminated by a signal on Unix."},"sources":[{"fileName":"shell.ts","line":95,"character":2}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]}},{"id":501,"name":"signal","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"If the process was terminated by a signal, represents that signal."},"sources":[{"fileName":"shell.ts","line":97,"character":2}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]}},{"id":503,"name":"stderr","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The data that the process wrote to `stderr`."},"sources":[{"fileName":"shell.ts","line":101,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":502,"name":"stdout","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The data that the process wrote to `stdout`."},"sources":[{"fileName":"shell.ts","line":99,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[500,501,503,502]}],"sources":[{"fileName":"shell.ts","line":93,"character":10}]},{"id":504,"name":"SpawnOptions","kind":256,"kindString":"Interface","flags":{},"children":[{"id":505,"name":"cwd","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Current working directory."},"sources":[{"fileName":"shell.ts","line":83,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":506,"name":"env","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Environment variables. set to `null` to clear the process env."},"sources":[{"fileName":"shell.ts","line":85,"character":2}],"type":{"type":"reflection","declaration":{"id":507,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"indexSignature":{"id":508,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":509,"name":"name","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}}}}],"groups":[{"title":"Properties","kind":1024,"children":[505,506]}],"sources":[{"fileName":"shell.ts","line":81,"character":10}]},{"id":495,"name":"open","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"shell.ts","line":416,"character":15}],"signatures":[{"id":496,"name":"open","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Opens a path or URL with the system's default app,\nor the one specified with `openWith`.","text":"The `openWith` value must be one of `firefox`, `google chrome`, `chromium` `safari`,\n`open`, `start`, `xdg-open`, `gio`, gnome-open`, `kde-open` or `wslview`.\n","returns":"\n","tags":[{"tag":"example","text":"\n```typescript\n// opens the given URL on the default browser:\nawait open('https://github.com/tauri-apps/tauri')\n// opens the given URL using `firefox`:\nawait open('https://github.com/tauri-apps/tauri', 'firefox')\n// opens a file using the default program:\nawait open('/path/to/file')\n```\n"}]},"parameters":[{"id":497,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The path or URL to open.\nThis value is matched against the string regex defined on `tauri.conf.json > tauri > allowlist > shell > open`,\nwhich defaults to `^https?://`."},"type":{"type":"intrinsic","name":"string"}},{"id":498,"name":"openWith","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The app to open the file or URL with.\nDefaults to the system default application for the specified path type."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Classes","kind":128,"children":[455,424,465]},{"title":"Interfaces","kind":256,"children":[499,504]},{"title":"Functions","kind":64,"children":[495]}],"sources":[{"fileName":"shell.ts","line":78,"character":0}]},{"id":510,"name":"tauri","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Invoke your custom commands.","text":"This package is also accessible with `window.__TAURI__.tauri` when `tauri.conf.json > build > withGlobalTauri` is set to true."},"children":[{"id":511,"name":"InvokeArgs","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Command arguments."},"sources":[{"fileName":"tauri.ts","line":57,"character":10}],"indexSignature":{"id":512,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":513,"name":"key","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"unknown"}}},{"id":526,"name":"convertFileSrc","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"tauri.ts","line":116,"character":9}],"signatures":[{"id":527,"name":"convertFileSrc","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Convert a device file path to an URL that can be loaded by the webview.\nNote that `asset:` and `https://asset.localhost` must be allowed on the `csp` value configured on `tauri.conf.json > tauri > security`.\nExample CSP value: `\"csp\": \"default-src 'self'; img-src 'self' asset: https://asset.localhost\"` to use the asset protocol on image sources.","text":"Additionally, the `asset` must be allowlisted under `tauri.conf.json > tauri > allowlist > protocol`,\nand its access scope must be defined on the `assetScope` array on the same `protocol` object.\n","returns":"the URL that can be used as source on the webview.\n","tags":[{"tag":"example","text":"\n```typescript\nimport { appDir, join } from '@tauri-apps/api/path'\nimport { convertFileSrc } from '@tauri-apps/api/tauri'\nconst appDirPath = await appDir()\nconst filePath = await join(appDir, 'assets/video.mp4')\nconst assetUrl = convertFileSrc(filePath)\n\nconst video = document.getElementById('my-video')\nconst source = document.createElement('source')\nsource.type = 'video/mp4'\nsource.src = assetUrl\nvideo.appendChild(source)\nvideo.load()\n```\n"}]},"parameters":[{"id":528,"name":"filePath","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The file path."},"type":{"type":"intrinsic","name":"string"}},{"id":529,"name":"protocol","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol."},"type":{"type":"intrinsic","name":"string"},"defaultValue":"'asset'"}],"type":{"type":"intrinsic","name":"string"}}]},{"id":521,"name":"invoke","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"tauri.ts","line":68,"character":15}],"signatures":[{"id":522,"name":"invoke","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sends a message to the backend.","returns":"A promise resolving or rejecting to the backend response.\n"},"typeParameter":[{"id":523,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":524,"name":"cmd","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The command name."},"type":{"type":"intrinsic","name":"string"}},{"id":525,"name":"args","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The optional arguments to pass to the command."},"type":{"type":"reference","id":511,"name":"InvokeArgs"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":514,"name":"transformCallback","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"tauri.ts","line":34,"character":9}],"signatures":[{"id":515,"name":"transformCallback","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Transforms a callback function to a string identifier that can be passed to the backend.\nThe backend uses the identifier to `eval()` the callback.","returns":"A unique identifier associated with the callback function.\n"},"parameters":[{"id":516,"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":517,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":518,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":519,"name":"response","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"id":520,"name":"once","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"}],"type":{"type":"intrinsic","name":"number"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[511]},{"title":"Functions","kind":64,"children":[526,521,514]}],"sources":[{"fileName":"tauri.ts","line":13,"character":0}]},{"id":530,"name":"updater","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Customize the auto updater flow.","text":"This package is also accessible with `window.__TAURI__.updater` when `tauri.conf.json > build > withGlobalTauri` is set to true."},"children":[{"id":535,"name":"UpdateManifest","kind":256,"kindString":"Interface","flags":{},"children":[{"id":538,"name":"body","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"updater.ts","line":24,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":537,"name":"date","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"updater.ts","line":23,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":536,"name":"version","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"updater.ts","line":22,"character":2}],"type":{"type":"intrinsic","name":"string"}}],"groups":[{"title":"Properties","kind":1024,"children":[538,537,536]}],"sources":[{"fileName":"updater.ts","line":21,"character":10}]},{"id":539,"name":"UpdateResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":540,"name":"manifest","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"updater.ts","line":28,"character":2}],"type":{"type":"reference","id":535,"name":"UpdateManifest"}},{"id":541,"name":"shouldUpdate","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"updater.ts","line":29,"character":2}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[540,541]}],"sources":[{"fileName":"updater.ts","line":27,"character":10}]},{"id":532,"name":"UpdateStatusResult","kind":256,"kindString":"Interface","flags":{},"children":[{"id":533,"name":"error","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"updater.ts","line":17,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":534,"name":"status","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"updater.ts","line":18,"character":2}],"type":{"type":"reference","id":531,"name":"UpdateStatus"}}],"groups":[{"title":"Properties","kind":1024,"children":[533,534]}],"sources":[{"fileName":"updater.ts","line":16,"character":10}]},{"id":531,"name":"UpdateStatus","kind":4194304,"kindString":"Type alias","flags":{},"sources":[{"fileName":"updater.ts","line":14,"character":5}],"type":{"type":"union","types":[{"type":"literal","value":"PENDING"},{"type":"literal","value":"ERROR"},{"type":"literal","value":"DONE"},{"type":"literal","value":"UPTODATE"}]}},{"id":544,"name":"checkUpdate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"updater.ts","line":89,"character":15}],"signatures":[{"id":545,"name":"checkUpdate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Checks if an update is available.","returns":"Promise resolving to the update status.\n"},"type":{"type":"reference","typeArguments":[{"type":"reference","id":539,"name":"UpdateResult"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":542,"name":"installUpdate","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"updater.ts","line":37,"character":15}],"signatures":[{"id":543,"name":"installUpdate","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Install the update if there's one available.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Interfaces","kind":256,"children":[535,539,532]},{"title":"Type aliases","kind":4194304,"children":[531]},{"title":"Functions","kind":64,"children":[544,542]}],"sources":[{"fileName":"updater.ts","line":12,"character":0}]},{"id":546,"name":"window","kind":2,"kindString":"Module","flags":{},"comment":{"shortText":"Provides APIs to create windows, communicate with other windows and manipulate the current window.","text":"This package is also accessible with `window.__TAURI__.window` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"window\": {\n        \"all\": true, // enable all window APIs\n        \"create\": true, // enable window creation\n        \"center\": true,\n        \"requestUserAttention\": true,\n        \"setResizable\": true,\n        \"setTitle\": true,\n        \"maximize\": true,\n        \"unmaximize\": true,\n        \"minimize\": true,\n        \"unminimize\": true,\n        \"show\": true,\n        \"hide\": true,\n        \"close\": true,\n        \"setDecorations\": true,\n        \"setAlwaysOnTop\": true,\n        \"setSize\": true,\n        \"setMinSize\": true,\n        \"setMaxSize\": true,\n        \"setPosition\": true,\n        \"setFullscreen\": true,\n        \"setFocus\": true,\n        \"setIcon\": true,\n        \"setSkipTaskbar\": true,\n        \"startDragging\": true,\n        \"print\": true\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.\n\n# Window events\n\nEvents can be listened using `appWindow.listen`:\n```typescript\nimport { appWindow } from '@tauri-apps/api/window'\nappWindow.listen('tauri://move', ({ event, payload }) => {\n  const { x, y } = payload // payload here is a `PhysicalPosition`\n})\n```\n\nWindow-specific events emitted by the backend:\n\n#### 'tauri://resize'\nEmitted when the size of the window has changed.\n*EventPayload*:\n```typescript\ntype ResizePayload = PhysicalSize\n```\n\n#### 'tauri://move'\nEmitted when the position of the window has changed.\n*EventPayload*:\n```typescript\ntype MovePayload = PhysicalPosition\n```\n\n#### 'tauri://close-requested'\nEmitted when the user requests the window to be closed.\nIf a listener is registered for this event, Tauri won't close the window so you must call `appWindow.close()` manually.\n\n#### 'tauri://focus'\nEmitted when the window gains focus.\n\n#### 'tauri://blur'\nEmitted when the window loses focus.\n\n#### 'tauri://scale-change'\nEmitted when the window's scale factor has changed.\nThe following user actions can cause DPI changes:\n- Changing the display's resolution.\n- Changing the display's scale factor (e.g. in Control Panel on Windows).\n- Moving the window to a display with a different scale factor.\n*Event payload*:\n```typescript\ninterface ScaleFactorChanged {\n  scaleFactor: number\n  size: PhysicalSize\n}\n```\n\n#### 'tauri://menu'\nEmitted when a menu item is clicked.\n*EventPayload*:\n```typescript\ntype MenuClicked = string\n```\n"},"children":[{"id":835,"name":"UserAttentionType","kind":8,"kindString":"Enumeration","flags":{},"comment":{"shortText":"Attention type to request on a window."},"children":[{"id":836,"name":"Critical","kind":16,"kindString":"Enumeration member","flags":{},"comment":{"shortText":"#### Platform-specific\n - **macOS:** Bounces the dock icon until the application is in focus.\n- **Windows:** Flashes both the window and the taskbar button until the application is in focus."},"sources":[{"fileName":"window.ts","line":204,"character":2}],"defaultValue":"1"},{"id":837,"name":"Informational","kind":16,"kindString":"Enumeration member","flags":{},"comment":{"shortText":"#### Platform-specific\n- **macOS:** Bounces the dock icon once.\n- **Windows:** Flashes the taskbar button until the application is in focus."},"sources":[{"fileName":"window.ts","line":210,"character":2}],"defaultValue":"2"}],"groups":[{"title":"Enumeration members","kind":16,"children":[836,837]}],"sources":[{"fileName":"window.ts","line":198,"character":5}]},{"id":816,"name":"LogicalPosition","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"A position represented in logical pixels."},"children":[{"id":817,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"window.ts","line":159,"character":2}],"signatures":[{"id":818,"name":"new LogicalPosition","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":819,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":820,"name":"y","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":816,"name":"LogicalPosition"}}]},{"id":821,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":155,"character":2}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"'Logical'"},{"id":822,"name":"x","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":156,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":823,"name":"y","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":157,"character":2}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[817]},{"title":"Properties","kind":1024,"children":[821,822,823]}],"sources":[{"fileName":"window.ts","line":154,"character":6}]},{"id":797,"name":"LogicalSize","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"A size represented in logical pixels."},"children":[{"id":798,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"window.ts","line":130,"character":2}],"signatures":[{"id":799,"name":"new LogicalSize","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":800,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":801,"name":"height","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":797,"name":"LogicalSize"}}]},{"id":804,"name":"height","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":128,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":802,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":126,"character":2}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"'Logical'"},{"id":803,"name":"width","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":127,"character":2}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Constructors","kind":512,"children":[798]},{"title":"Properties","kind":1024,"children":[804,802,803]}],"sources":[{"fileName":"window.ts","line":125,"character":6}]},{"id":824,"name":"PhysicalPosition","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"A position represented in physical pixels."},"children":[{"id":825,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"window.ts","line":171,"character":2}],"signatures":[{"id":826,"name":"new PhysicalPosition","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":827,"name":"x","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":828,"name":"y","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":824,"name":"PhysicalPosition"}}]},{"id":829,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":167,"character":2}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"'Physical'"},{"id":830,"name":"x","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":168,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":831,"name":"y","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":169,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":832,"name":"toLogical","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":177,"character":2}],"signatures":[{"id":833,"name":"toLogical","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts the physical position to a logical one."},"parameters":[{"id":834,"name":"scaleFactor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":816,"name":"LogicalPosition"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[825]},{"title":"Properties","kind":1024,"children":[829,830,831]},{"title":"Methods","kind":2048,"children":[832]}],"sources":[{"fileName":"window.ts","line":166,"character":6}]},{"id":805,"name":"PhysicalSize","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"A size represented in physical pixels."},"children":[{"id":806,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"window.ts","line":142,"character":2}],"signatures":[{"id":807,"name":"new PhysicalSize","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":808,"name":"width","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}},{"id":809,"name":"height","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":805,"name":"PhysicalSize"}}]},{"id":812,"name":"height","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":140,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":810,"name":"type","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":138,"character":2}],"type":{"type":"intrinsic","name":"string"},"defaultValue":"'Physical'"},{"id":811,"name":"width","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"window.ts","line":139,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":813,"name":"toLogical","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":148,"character":2}],"signatures":[{"id":814,"name":"toLogical","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Converts the physical size to a logical one."},"parameters":[{"id":815,"name":"scaleFactor","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","id":797,"name":"LogicalSize"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[806]},{"title":"Properties","kind":1024,"children":[812,810,811]},{"title":"Methods","kind":2048,"children":[813]}],"sources":[{"fileName":"window.ts","line":137,"character":6}]},{"id":548,"name":"WebviewWindow","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"Create new webview windows and get a handle to existing ones.","tags":[{"tag":"example","text":"\n```typescript\n// loading embedded asset:\nconst webview = new WebviewWindow('theUniqueLabel', {\n  url: 'path/to/page.html'\n})\n// alternatively, load a remote URL:\nconst webview = new WebviewWindow('theUniqueLabel', {\n  url: 'https://github.com/tauri-apps/tauri'\n})\n\nwebview.once('tauri://created', function () {\n // webview window successfully created\n})\nwebview.once('tauri://error', function (e) {\n // an error happened creating the webview window\n})\n\n// emit an event to the backend\nawait webview.emit(\"some event\", \"data\")\n// listen to an event from the backend\nconst unlisten = await webview.listen(\"event name\", e => {})\nunlisten()\n```\n"}]},"children":[{"id":552,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"window.ts","line":1123,"character":2}],"signatures":[{"id":553,"name":"new WebviewWindow","kind":16384,"kindString":"Constructor signature","flags":{},"comment":{"shortText":"Creates a new WebviewWindow.\n* @param label The webview window label, a unique identifier that can be used to reference it later. It must be alphanumeric.","returns":"The WebviewWindow instance to communicate with the webview.\n"},"parameters":[{"id":554,"name":"label","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":555,"name":"options","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":849,"name":"WindowOptions"},"defaultValue":"{}"}],"type":{"type":"reference","id":548,"name":"WebviewWindow"},"overwrites":{"type":"reference","id":688,"name":"WindowManager.constructor"}}],"overwrites":{"type":"reference","id":687,"name":"WindowManager.constructor"}},{"id":634,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The window label. It is a unique identifier for the window, can be used to reference it later."},"sources":[{"fileName":"window.ts","line":250,"character":2}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":768,"name":"WindowManager.label"}},{"id":635,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Local event listeners."},"sources":[{"fileName":"window.ts","line":252,"character":2}],"type":{"type":"reflection","declaration":{"id":636,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"indexSignature":{"id":637,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":638,"name":"key","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"array","elementType":{"type":"reference","id":189,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"EventCallback"}}}}},"inheritedFrom":{"type":"reference","id":769,"name":"WindowManager.listeners"}},{"id":653,"name":"_handleTauriEvent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":316,"character":2}],"signatures":[{"id":654,"name":"_handleTauriEvent","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":655,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":656,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":657,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":655,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":788,"name":"WindowManager._handleTauriEvent"}}],"inheritedFrom":{"type":"reference","id":787,"name":"WindowManager._handleTauriEvent"}},{"id":576,"name":"center","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":510,"character":8}],"signatures":[{"id":577,"name":"center","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Centers the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":711,"name":"WindowManager.center"}}],"inheritedFrom":{"type":"reference","id":710,"name":"WindowManager.center"}},{"id":601,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":756,"character":8}],"signatures":[{"id":602,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Closes the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":736,"name":"WindowManager.close"}}],"inheritedFrom":{"type":"reference","id":735,"name":"WindowManager.close"}},{"id":649,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":305,"character":8}],"signatures":[{"id":650,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Emits an event to the backend, tied to the webview window."},"parameters":[{"id":651,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"intrinsic","name":"string"}},{"id":652,"name":"payload","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Event payload.\n"},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":784,"name":"WindowManager.emit"}}],"inheritedFrom":{"type":"reference","id":783,"name":"WindowManager.emit"}},{"id":599,"name":"hide","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":736,"character":8}],"signatures":[{"id":600,"name":"hide","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window visibility to false.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":734,"name":"WindowManager.hide"}}],"inheritedFrom":{"type":"reference","id":733,"name":"WindowManager.hide"}},{"id":558,"name":"innerPosition","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":353,"character":8}],"signatures":[{"id":559,"name":"innerPosition","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":824,"name":"PhysicalPosition"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":693,"name":"WindowManager.innerPosition"}}],"inheritedFrom":{"type":"reference","id":692,"name":"WindowManager.innerPosition"}},{"id":562,"name":"innerSize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":388,"character":8}],"signatures":[{"id":563,"name":"innerSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The physical size of the window's client area.\nThe client area is the content of the window, excluding the title bar and borders."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":805,"name":"PhysicalSize"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":697,"name":"WindowManager.innerSize"}}],"inheritedFrom":{"type":"reference","id":696,"name":"WindowManager.innerSize"}},{"id":570,"name":"isDecorated","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":455,"character":8}],"signatures":[{"id":571,"name":"isDecorated","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the window's current decorated state."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":705,"name":"WindowManager.isDecorated"}}],"inheritedFrom":{"type":"reference","id":704,"name":"WindowManager.isDecorated"}},{"id":566,"name":"isFullscreen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":423,"character":8}],"signatures":[{"id":567,"name":"isFullscreen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the window's current fullscreen state."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":701,"name":"WindowManager.isFullscreen"}}],"inheritedFrom":{"type":"reference","id":700,"name":"WindowManager.isFullscreen"}},{"id":568,"name":"isMaximized","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":439,"character":8}],"signatures":[{"id":569,"name":"isMaximized","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the window's current maximized state."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":703,"name":"WindowManager.isMaximized"}}],"inheritedFrom":{"type":"reference","id":702,"name":"WindowManager.isMaximized"}},{"id":572,"name":"isResizable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":471,"character":8}],"signatures":[{"id":573,"name":"isResizable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the window's current resizable state."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":707,"name":"WindowManager.isResizable"}}],"inheritedFrom":{"type":"reference","id":706,"name":"WindowManager.isResizable"}},{"id":574,"name":"isVisible","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":487,"character":8}],"signatures":[{"id":575,"name":"isVisible","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the window's current visible state."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":709,"name":"WindowManager.isVisible"}}],"inheritedFrom":{"type":"reference","id":708,"name":"WindowManager.isVisible"}},{"id":639,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":267,"character":8}],"signatures":[{"id":640,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an event emitted by the backend that is tied to the webview window.","returns":"A promise resolving to a function to unlisten to the event.\n"},"typeParameter":[{"id":641,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":642,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"reference","id":188,"name":"EventName"}},{"id":643,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event handler."},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":641,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":194,"name":"UnlistenFn"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":774,"name":"WindowManager.listen"}}],"inheritedFrom":{"type":"reference","id":773,"name":"WindowManager.listen"}},{"id":587,"name":"maximize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":616,"character":8}],"signatures":[{"id":588,"name":"maximize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Maximizes the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":722,"name":"WindowManager.maximize"}}],"inheritedFrom":{"type":"reference","id":721,"name":"WindowManager.maximize"}},{"id":593,"name":"minimize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":676,"character":8}],"signatures":[{"id":594,"name":"minimize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Minimizes the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":728,"name":"WindowManager.minimize"}}],"inheritedFrom":{"type":"reference","id":727,"name":"WindowManager.minimize"}},{"id":644,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":288,"character":8}],"signatures":[{"id":645,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an one-off event emitted by the backend that is tied to the webview window.","returns":"A promise resolving to a function to unlisten to the event.\n"},"typeParameter":[{"id":646,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":647,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"intrinsic","name":"string"}},{"id":648,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event handler."},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":646,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":194,"name":"UnlistenFn"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":779,"name":"WindowManager.once"}}],"inheritedFrom":{"type":"reference","id":778,"name":"WindowManager.once"}},{"id":560,"name":"outerPosition","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":369,"character":8}],"signatures":[{"id":561,"name":"outerPosition","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":824,"name":"PhysicalPosition"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":695,"name":"WindowManager.outerPosition"}}],"inheritedFrom":{"type":"reference","id":694,"name":"WindowManager.outerPosition"}},{"id":564,"name":"outerSize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":407,"character":8}],"signatures":[{"id":565,"name":"outerSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The physical size of the entire window.\nThese dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":805,"name":"PhysicalSize"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":699,"name":"WindowManager.outerSize"}}],"inheritedFrom":{"type":"reference","id":698,"name":"WindowManager.outerSize"}},{"id":578,"name":"requestUserAttention","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":541,"character":8}],"signatures":[{"id":579,"name":"requestUserAttention","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":" Requests user attention to the window, this has no effect if the application\nis already focused. How requesting for user attention manifests is platform dependent,\nsee `UserAttentionType` for details.","text":"Providing `null` will unset the request for user attention. Unsetting the request for\nuser attention might not be done automatically by the WM when the window receives input.\n\n#### Platform-specific\n\n- **macOS:** `null` has no effect.\n- **Linux:** Urgency levels have the same effect.\n","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":580,"name":"requestType","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":835,"name":"UserAttentionType"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":713,"name":"WindowManager.requestUserAttention"}}],"inheritedFrom":{"type":"reference","id":712,"name":"WindowManager.requestUserAttention"}},{"id":556,"name":"scaleFactor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":337,"character":8}],"signatures":[{"id":557,"name":"scaleFactor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The scale factor that can be used to map physical pixels to logical pixels."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":691,"name":"WindowManager.scaleFactor"}}],"inheritedFrom":{"type":"reference","id":690,"name":"WindowManager.scaleFactor"}},{"id":606,"name":"setAlwaysOnTop","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":799,"character":8}],"signatures":[{"id":607,"name":"setAlwaysOnTop","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Whether the window should always be on top of other windows.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":608,"name":"alwaysOnTop","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Whether the window should always be on top of other windows or not."},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":741,"name":"WindowManager.setAlwaysOnTop"}}],"inheritedFrom":{"type":"reference","id":740,"name":"WindowManager.setAlwaysOnTop"}},{"id":603,"name":"setDecorations","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":777,"character":8}],"signatures":[{"id":604,"name":"setDecorations","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Whether the window should have borders and bars.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":605,"name":"decorations","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Whether the window should have borders and bars."},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":738,"name":"WindowManager.setDecorations"}}],"inheritedFrom":{"type":"reference","id":737,"name":"WindowManager.setDecorations"}},{"id":624,"name":"setFocus","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":1007,"character":8}],"signatures":[{"id":625,"name":"setFocus","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Bring the window to front and focus.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":759,"name":"WindowManager.setFocus"}}],"inheritedFrom":{"type":"reference","id":758,"name":"WindowManager.setFocus"}},{"id":621,"name":"setFullscreen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":986,"character":8}],"signatures":[{"id":622,"name":"setFullscreen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window fullscreen state.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":623,"name":"fullscreen","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Whether the window should go to fullscreen or not."},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":756,"name":"WindowManager.setFullscreen"}}],"inheritedFrom":{"type":"reference","id":755,"name":"WindowManager.setFullscreen"}},{"id":626,"name":"setIcon","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":1028,"character":8}],"signatures":[{"id":627,"name":"setIcon","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window icon.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":628,"name":"icon","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Icon bytes or path to the icon file."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","qualifiedName":"Uint8Array","package":"typescript","name":"Uint8Array"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":761,"name":"WindowManager.setIcon"}}],"inheritedFrom":{"type":"reference","id":760,"name":"WindowManager.setIcon"}},{"id":615,"name":"setMaxSize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":906,"character":8}],"signatures":[{"id":616,"name":"setMaxSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.","returns":"A promise indicating the success or failure of the operation.\n","tags":[{"tag":"example","text":"\n```typescript\nimport { appWindow, LogicalSize } from '@tauri-apps/api/window'\nawait appWindow.setMaxSize(new LogicalSize(600, 500))\n```\n"}]},"parameters":[{"id":617,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The logical or physical inner size, or `null` to unset the constraint."},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"literal","value":null},{"type":"reference","id":805,"name":"PhysicalSize"},{"type":"reference","id":797,"name":"LogicalSize"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":750,"name":"WindowManager.setMaxSize"}}],"inheritedFrom":{"type":"reference","id":749,"name":"WindowManager.setMaxSize"}},{"id":612,"name":"setMinSize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":864,"character":8}],"signatures":[{"id":613,"name":"setMinSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.","returns":"A promise indicating the success or failure of the operation.\n","tags":[{"tag":"example","text":"\n```typescript\nimport { appWindow, PhysicalSize } from '@tauri-apps/api/window'\nawait appWindow.setMinSize(new PhysicalSize(600, 500))\n```\n"}]},"parameters":[{"id":614,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The logical or physical inner size, or `null` to unset the constraint."},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"literal","value":null},{"type":"reference","id":805,"name":"PhysicalSize"},{"type":"reference","id":797,"name":"LogicalSize"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":747,"name":"WindowManager.setMinSize"}}],"inheritedFrom":{"type":"reference","id":746,"name":"WindowManager.setMinSize"}},{"id":618,"name":"setPosition","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":948,"character":8}],"signatures":[{"id":619,"name":"setPosition","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window outer position.","returns":"A promise indicating the success or failure of the operation.\n","tags":[{"tag":"example","text":"\n```typescript\nimport { appWindow, LogicalPosition } from '@tauri-apps/api/window'\nawait appWindow.setPosition(new LogicalPosition(600, 500))\n```\n"}]},"parameters":[{"id":620,"name":"position","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The new position, in logical or physical pixels."},"type":{"type":"union","types":[{"type":"reference","id":824,"name":"PhysicalPosition"},{"type":"reference","id":816,"name":"LogicalPosition"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":753,"name":"WindowManager.setPosition"}}],"inheritedFrom":{"type":"reference","id":752,"name":"WindowManager.setPosition"}},{"id":581,"name":"setResizable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":573,"character":8}],"signatures":[{"id":582,"name":"setResizable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Updates the window resizable flag.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":583,"name":"resizable","kind":32768,"kindString":"Parameter","flags":{},"comment":{},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":716,"name":"WindowManager.setResizable"}}],"inheritedFrom":{"type":"reference","id":715,"name":"WindowManager.setResizable"}},{"id":609,"name":"setSize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":826,"character":8}],"signatures":[{"id":610,"name":"setSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resizes the window with a new inner size.","returns":"A promise indicating the success or failure of the operation.\n","tags":[{"tag":"example","text":"\n```typescript\nimport { appWindow, LogicalSize } from '@tauri-apps/api/window'\nawait appWindow.setSize(new LogicalSize(600, 500))\n```\n"}]},"parameters":[{"id":611,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The logical or physical inner size."},"type":{"type":"union","types":[{"type":"reference","id":805,"name":"PhysicalSize"},{"type":"reference","id":797,"name":"LogicalSize"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":744,"name":"WindowManager.setSize"}}],"inheritedFrom":{"type":"reference","id":743,"name":"WindowManager.setSize"}},{"id":629,"name":"setSkipTaskbar","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":1053,"character":8}],"signatures":[{"id":630,"name":"setSkipTaskbar","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Whether to show the window icon in the task bar or not.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":631,"name":"skip","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"true to hide window icon, false to show it."},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":764,"name":"WindowManager.setSkipTaskbar"}}],"inheritedFrom":{"type":"reference","id":763,"name":"WindowManager.setSkipTaskbar"}},{"id":584,"name":"setTitle","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":595,"character":8}],"signatures":[{"id":585,"name":"setTitle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window title.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":586,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The new title"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":719,"name":"WindowManager.setTitle"}}],"inheritedFrom":{"type":"reference","id":718,"name":"WindowManager.setTitle"}},{"id":597,"name":"show","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":716,"character":8}],"signatures":[{"id":598,"name":"show","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window visibility to true.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":732,"name":"WindowManager.show"}}],"inheritedFrom":{"type":"reference","id":731,"name":"WindowManager.show"}},{"id":632,"name":"startDragging","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":1074,"character":8}],"signatures":[{"id":633,"name":"startDragging","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Starts dragging the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":767,"name":"WindowManager.startDragging"}}],"inheritedFrom":{"type":"reference","id":766,"name":"WindowManager.startDragging"}},{"id":591,"name":"toggleMaximize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":656,"character":8}],"signatures":[{"id":592,"name":"toggleMaximize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Toggles the window maximized state.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":726,"name":"WindowManager.toggleMaximize"}}],"inheritedFrom":{"type":"reference","id":725,"name":"WindowManager.toggleMaximize"}},{"id":589,"name":"unmaximize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":636,"character":8}],"signatures":[{"id":590,"name":"unmaximize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unmaximizes the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":724,"name":"WindowManager.unmaximize"}}],"inheritedFrom":{"type":"reference","id":723,"name":"WindowManager.unmaximize"}},{"id":595,"name":"unminimize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":696,"character":8}],"signatures":[{"id":596,"name":"unminimize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unminimizes the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":730,"name":"WindowManager.unminimize"}}],"inheritedFrom":{"type":"reference","id":729,"name":"WindowManager.unminimize"}},{"id":549,"name":"getByLabel","kind":2048,"kindString":"Method","flags":{"isStatic":true},"sources":[{"fileName":"window.ts","line":1150,"character":9}],"signatures":[{"id":550,"name":"getByLabel","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the WebviewWindow for the webview associated with the given label.","returns":"The WebviewWindow instance to communicate with the webview or null if the webview doesn't exist.\n"},"parameters":[{"id":551,"name":"label","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The webview window label."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":548,"name":"WebviewWindow"}]}}]}],"groups":[{"title":"Constructors","kind":512,"children":[552]},{"title":"Properties","kind":1024,"children":[634,635]},{"title":"Methods","kind":2048,"children":[653,576,601,649,599,558,562,570,566,568,572,574,639,587,593,644,560,564,578,556,606,603,624,621,626,615,612,618,581,609,629,584,597,632,591,589,595,549]}],"sources":[{"fileName":"window.ts","line":1117,"character":6}],"extendedTypes":[{"type":"reference","id":686,"name":"WindowManager"}]},{"id":658,"name":"WebviewWindowHandle","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"A webview window handle allows emitting and listening to events from the backend that are tied to the window."},"children":[{"id":659,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"sources":[{"fileName":"window.ts","line":254,"character":2}],"signatures":[{"id":660,"name":"new WebviewWindowHandle","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":661,"name":"label","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":658,"name":"WebviewWindowHandle"}}]},{"id":662,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The window label. It is a unique identifier for the window, can be used to reference it later."},"sources":[{"fileName":"window.ts","line":250,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":663,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Local event listeners."},"sources":[{"fileName":"window.ts","line":252,"character":2}],"type":{"type":"reflection","declaration":{"id":664,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"indexSignature":{"id":665,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":666,"name":"key","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"array","elementType":{"type":"reference","id":189,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"EventCallback"}}}}}},{"id":681,"name":"_handleTauriEvent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":316,"character":2}],"signatures":[{"id":682,"name":"_handleTauriEvent","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":683,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":684,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":685,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":655,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"id":677,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":305,"character":8}],"signatures":[{"id":678,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Emits an event to the backend, tied to the webview window."},"parameters":[{"id":679,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"intrinsic","name":"string"}},{"id":680,"name":"payload","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Event payload.\n"},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":667,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":267,"character":8}],"signatures":[{"id":668,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an event emitted by the backend that is tied to the webview window.","returns":"A promise resolving to a function to unlisten to the event.\n"},"typeParameter":[{"id":669,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":670,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"reference","id":188,"name":"EventName"}},{"id":671,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event handler."},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":641,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":194,"name":"UnlistenFn"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":672,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":288,"character":8}],"signatures":[{"id":673,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an one-off event emitted by the backend that is tied to the webview window.","returns":"A promise resolving to a function to unlisten to the event.\n"},"typeParameter":[{"id":674,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":675,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"intrinsic","name":"string"}},{"id":676,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event handler."},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":646,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":194,"name":"UnlistenFn"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[659]},{"title":"Properties","kind":1024,"children":[662,663]},{"title":"Methods","kind":2048,"children":[681,677,667,672]}],"sources":[{"fileName":"window.ts","line":248,"character":6}],"extendedBy":[{"type":"reference","id":686,"name":"WindowManager"}]},{"id":686,"name":"WindowManager","kind":128,"kindString":"Class","flags":{},"comment":{"shortText":"Manage the current window object."},"children":[{"id":687,"name":"constructor","kind":512,"kindString":"Constructor","flags":{},"signatures":[{"id":688,"name":"new WindowManager","kind":16384,"kindString":"Constructor signature","flags":{},"parameters":[{"id":689,"name":"label","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","id":686,"name":"WindowManager"},"inheritedFrom":{"type":"reference","id":660,"name":"WebviewWindowHandle.constructor"}}],"inheritedFrom":{"type":"reference","id":659,"name":"WebviewWindowHandle.constructor"}},{"id":768,"name":"label","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The window label. It is a unique identifier for the window, can be used to reference it later."},"sources":[{"fileName":"window.ts","line":250,"character":2}],"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","id":662,"name":"WebviewWindowHandle.label"}},{"id":769,"name":"listeners","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Local event listeners."},"sources":[{"fileName":"window.ts","line":252,"character":2}],"type":{"type":"reflection","declaration":{"id":770,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"indexSignature":{"id":771,"name":"__index","kind":8192,"kindString":"Index signature","flags":{},"parameters":[{"id":772,"name":"key","kind":32768,"flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"array","elementType":{"type":"reference","id":189,"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"EventCallback"}}}}},"inheritedFrom":{"type":"reference","id":663,"name":"WebviewWindowHandle.listeners"}},{"id":787,"name":"_handleTauriEvent","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":316,"character":2}],"signatures":[{"id":788,"name":"_handleTauriEvent","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":789,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":790,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":791,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":655,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","id":682,"name":"WebviewWindowHandle._handleTauriEvent"}}],"inheritedFrom":{"type":"reference","id":681,"name":"WebviewWindowHandle._handleTauriEvent"}},{"id":710,"name":"center","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":510,"character":8}],"signatures":[{"id":711,"name":"center","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Centers the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":735,"name":"close","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":756,"character":8}],"signatures":[{"id":736,"name":"close","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Closes the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":783,"name":"emit","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":305,"character":8}],"signatures":[{"id":784,"name":"emit","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Emits an event to the backend, tied to the webview window."},"parameters":[{"id":785,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"intrinsic","name":"string"}},{"id":786,"name":"payload","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"Event payload.\n"},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":678,"name":"WebviewWindowHandle.emit"}}],"inheritedFrom":{"type":"reference","id":677,"name":"WebviewWindowHandle.emit"}},{"id":733,"name":"hide","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":736,"character":8}],"signatures":[{"id":734,"name":"hide","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window visibility to false.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":692,"name":"innerPosition","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":353,"character":8}],"signatures":[{"id":693,"name":"innerPosition","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":824,"name":"PhysicalPosition"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":696,"name":"innerSize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":388,"character":8}],"signatures":[{"id":697,"name":"innerSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The physical size of the window's client area.\nThe client area is the content of the window, excluding the title bar and borders."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":805,"name":"PhysicalSize"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":704,"name":"isDecorated","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":455,"character":8}],"signatures":[{"id":705,"name":"isDecorated","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the window's current decorated state."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":700,"name":"isFullscreen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":423,"character":8}],"signatures":[{"id":701,"name":"isFullscreen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the window's current fullscreen state."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":702,"name":"isMaximized","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":439,"character":8}],"signatures":[{"id":703,"name":"isMaximized","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the window's current maximized state."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":706,"name":"isResizable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":471,"character":8}],"signatures":[{"id":707,"name":"isResizable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the window's current resizable state."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":708,"name":"isVisible","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":487,"character":8}],"signatures":[{"id":709,"name":"isVisible","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the window's current visible state."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":773,"name":"listen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":267,"character":8}],"signatures":[{"id":774,"name":"listen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an event emitted by the backend that is tied to the webview window.","returns":"A promise resolving to a function to unlisten to the event.\n"},"typeParameter":[{"id":775,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":776,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"reference","id":188,"name":"EventName"}},{"id":777,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event handler."},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":641,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":194,"name":"UnlistenFn"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":668,"name":"WebviewWindowHandle.listen"}}],"inheritedFrom":{"type":"reference","id":667,"name":"WebviewWindowHandle.listen"}},{"id":721,"name":"maximize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":616,"character":8}],"signatures":[{"id":722,"name":"maximize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Maximizes the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":727,"name":"minimize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":676,"character":8}],"signatures":[{"id":728,"name":"minimize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Minimizes the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":778,"name":"once","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":288,"character":8}],"signatures":[{"id":779,"name":"once","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listen to an one-off event emitted by the backend that is tied to the webview window.","returns":"A promise resolving to a function to unlisten to the event.\n"},"typeParameter":[{"id":780,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":781,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`."},"type":{"type":"intrinsic","name":"string"}},{"id":782,"name":"handler","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Event handler."},"type":{"type":"reference","id":189,"typeArguments":[{"type":"reference","id":646,"name":"T"}],"name":"EventCallback"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","id":194,"name":"UnlistenFn"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"},"inheritedFrom":{"type":"reference","id":673,"name":"WebviewWindowHandle.once"}}],"inheritedFrom":{"type":"reference","id":672,"name":"WebviewWindowHandle.once"}},{"id":694,"name":"outerPosition","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":369,"character":8}],"signatures":[{"id":695,"name":"outerPosition","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":824,"name":"PhysicalPosition"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":698,"name":"outerSize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":407,"character":8}],"signatures":[{"id":699,"name":"outerSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The physical size of the entire window.\nThese dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead."},"type":{"type":"reference","typeArguments":[{"type":"reference","id":805,"name":"PhysicalSize"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":712,"name":"requestUserAttention","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":541,"character":8}],"signatures":[{"id":713,"name":"requestUserAttention","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":" Requests user attention to the window, this has no effect if the application\nis already focused. How requesting for user attention manifests is platform dependent,\nsee `UserAttentionType` for details.","text":"Providing `null` will unset the request for user attention. Unsetting the request for\nuser attention might not be done automatically by the WM when the window receives input.\n\n#### Platform-specific\n\n- **macOS:** `null` has no effect.\n- **Linux:** Urgency levels have the same effect.\n","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":714,"name":"requestType","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","id":835,"name":"UserAttentionType"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":690,"name":"scaleFactor","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":337,"character":8}],"signatures":[{"id":691,"name":"scaleFactor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"The scale factor that can be used to map physical pixels to logical pixels."},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":740,"name":"setAlwaysOnTop","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":799,"character":8}],"signatures":[{"id":741,"name":"setAlwaysOnTop","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Whether the window should always be on top of other windows.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":742,"name":"alwaysOnTop","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Whether the window should always be on top of other windows or not."},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":737,"name":"setDecorations","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":777,"character":8}],"signatures":[{"id":738,"name":"setDecorations","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Whether the window should have borders and bars.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":739,"name":"decorations","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Whether the window should have borders and bars."},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":758,"name":"setFocus","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":1007,"character":8}],"signatures":[{"id":759,"name":"setFocus","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Bring the window to front and focus.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":755,"name":"setFullscreen","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":986,"character":8}],"signatures":[{"id":756,"name":"setFullscreen","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window fullscreen state.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":757,"name":"fullscreen","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Whether the window should go to fullscreen or not."},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":760,"name":"setIcon","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":1028,"character":8}],"signatures":[{"id":761,"name":"setIcon","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window icon.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":762,"name":"icon","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"Icon bytes or path to the icon file."},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","qualifiedName":"Uint8Array","package":"typescript","name":"Uint8Array"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":749,"name":"setMaxSize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":906,"character":8}],"signatures":[{"id":750,"name":"setMaxSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.","returns":"A promise indicating the success or failure of the operation.\n","tags":[{"tag":"example","text":"\n```typescript\nimport { appWindow, LogicalSize } from '@tauri-apps/api/window'\nawait appWindow.setMaxSize(new LogicalSize(600, 500))\n```\n"}]},"parameters":[{"id":751,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The logical or physical inner size, or `null` to unset the constraint."},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"literal","value":null},{"type":"reference","id":805,"name":"PhysicalSize"},{"type":"reference","id":797,"name":"LogicalSize"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":746,"name":"setMinSize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":864,"character":8}],"signatures":[{"id":747,"name":"setMinSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.","returns":"A promise indicating the success or failure of the operation.\n","tags":[{"tag":"example","text":"\n```typescript\nimport { appWindow, PhysicalSize } from '@tauri-apps/api/window'\nawait appWindow.setMinSize(new PhysicalSize(600, 500))\n```\n"}]},"parameters":[{"id":748,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The logical or physical inner size, or `null` to unset the constraint."},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"literal","value":null},{"type":"reference","id":805,"name":"PhysicalSize"},{"type":"reference","id":797,"name":"LogicalSize"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":752,"name":"setPosition","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":948,"character":8}],"signatures":[{"id":753,"name":"setPosition","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window outer position.","returns":"A promise indicating the success or failure of the operation.\n","tags":[{"tag":"example","text":"\n```typescript\nimport { appWindow, LogicalPosition } from '@tauri-apps/api/window'\nawait appWindow.setPosition(new LogicalPosition(600, 500))\n```\n"}]},"parameters":[{"id":754,"name":"position","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The new position, in logical or physical pixels."},"type":{"type":"union","types":[{"type":"reference","id":824,"name":"PhysicalPosition"},{"type":"reference","id":816,"name":"LogicalPosition"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":715,"name":"setResizable","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":573,"character":8}],"signatures":[{"id":716,"name":"setResizable","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Updates the window resizable flag.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":717,"name":"resizable","kind":32768,"kindString":"Parameter","flags":{},"comment":{},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":743,"name":"setSize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":826,"character":8}],"signatures":[{"id":744,"name":"setSize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Resizes the window with a new inner size.","returns":"A promise indicating the success or failure of the operation.\n","tags":[{"tag":"example","text":"\n```typescript\nimport { appWindow, LogicalSize } from '@tauri-apps/api/window'\nawait appWindow.setSize(new LogicalSize(600, 500))\n```\n"}]},"parameters":[{"id":745,"name":"size","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The logical or physical inner size."},"type":{"type":"union","types":[{"type":"reference","id":805,"name":"PhysicalSize"},{"type":"reference","id":797,"name":"LogicalSize"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":763,"name":"setSkipTaskbar","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":1053,"character":8}],"signatures":[{"id":764,"name":"setSkipTaskbar","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Whether to show the window icon in the task bar or not.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":765,"name":"skip","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"true to hide window icon, false to show it."},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":718,"name":"setTitle","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":595,"character":8}],"signatures":[{"id":719,"name":"setTitle","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window title.","returns":"A promise indicating the success or failure of the operation.\n"},"parameters":[{"id":720,"name":"title","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The new title"},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":731,"name":"show","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":716,"character":8}],"signatures":[{"id":732,"name":"show","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Sets the window visibility to true.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":766,"name":"startDragging","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":1074,"character":8}],"signatures":[{"id":767,"name":"startDragging","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Starts dragging the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":725,"name":"toggleMaximize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":656,"character":8}],"signatures":[{"id":726,"name":"toggleMaximize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Toggles the window maximized state.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":723,"name":"unmaximize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":636,"character":8}],"signatures":[{"id":724,"name":"unmaximize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unmaximizes the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":729,"name":"unminimize","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"window.ts","line":696,"character":8}],"signatures":[{"id":730,"name":"unminimize","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Unminimizes the window.","returns":"A promise indicating the success or failure of the operation.\n"},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Constructors","kind":512,"children":[687]},{"title":"Properties","kind":1024,"children":[768,769]},{"title":"Methods","kind":2048,"children":[787,710,735,783,733,692,696,704,700,702,706,708,773,721,727,778,694,698,712,690,740,737,758,755,760,749,746,752,715,743,763,718,731,766,725,723,729]}],"sources":[{"fileName":"window.ts","line":334,"character":6}],"extendedTypes":[{"type":"reference","id":658,"name":"WebviewWindowHandle"}],"extendedBy":[{"type":"reference","id":548,"name":"WebviewWindow"}]},{"id":844,"name":"Monitor","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Allows you to retrieve information about a given monitor."},"children":[{"id":845,"name":"name","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"Human-readable name of the monitor"},"sources":[{"fileName":"window.ts","line":115,"character":2}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"id":847,"name":"position","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"the Top-left corner position of the monitor relative to the larger full screen area."},"sources":[{"fileName":"window.ts","line":119,"character":2}],"type":{"type":"reference","id":824,"name":"PhysicalPosition"}},{"id":848,"name":"scaleFactor","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The scale factor that can be used to map physical pixels to logical pixels."},"sources":[{"fileName":"window.ts","line":121,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":846,"name":"size","kind":1024,"kindString":"Property","flags":{},"comment":{"shortText":"The monitor's resolution."},"sources":[{"fileName":"window.ts","line":117,"character":2}],"type":{"type":"reference","id":805,"name":"PhysicalSize"}}],"groups":[{"title":"Properties","kind":1024,"children":[845,847,848,846]}],"sources":[{"fileName":"window.ts","line":113,"character":10}]},{"id":849,"name":"WindowOptions","kind":256,"kindString":"Interface","flags":{},"comment":{"shortText":"Configuration for the window to create."},"children":[{"id":868,"name":"alwaysOnTop","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the window should always be on top of other windows or not."},"sources":[{"fileName":"window.ts","line":1217,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":851,"name":"center","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Show window in the center of the screen.."},"sources":[{"fileName":"window.ts","line":1179,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":867,"name":"decorations","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the window should have borders and bars or not."},"sources":[{"fileName":"window.ts","line":1215,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":870,"name":"fileDropEnabled","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the file drop is enabled or not on the webview. By default it is enabled.","text":"Disabling it is required to use drag and drop on the frontend on Windows.\n"},"sources":[{"fileName":"window.ts","line":1225,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":863,"name":"focus","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the window will be initially hidden or focused."},"sources":[{"fileName":"window.ts","line":1203,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":862,"name":"fullscreen","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the window is in fullscreen mode or not."},"sources":[{"fileName":"window.ts","line":1201,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":855,"name":"height","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The initial height."},"sources":[{"fileName":"window.ts","line":1187,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":859,"name":"maxHeight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The maximum height. Only applies if `maxWidth` is also set."},"sources":[{"fileName":"window.ts","line":1195,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":858,"name":"maxWidth","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The maximum width. Only applies if `maxHeight` is also set."},"sources":[{"fileName":"window.ts","line":1193,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":865,"name":"maximized","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the window should be maximized upon creation or not."},"sources":[{"fileName":"window.ts","line":1211,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":857,"name":"minHeight","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The minimum height. Only applies if `minWidth` is also set."},"sources":[{"fileName":"window.ts","line":1191,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":856,"name":"minWidth","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The minimum width. Only applies if `minHeight` is also set."},"sources":[{"fileName":"window.ts","line":1189,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":860,"name":"resizable","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the window is resizable or not."},"sources":[{"fileName":"window.ts","line":1197,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":869,"name":"skipTaskbar","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether or not the window icon should be added to the taskbar."},"sources":[{"fileName":"window.ts","line":1219,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":861,"name":"title","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Window title."},"sources":[{"fileName":"window.ts","line":1199,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":864,"name":"transparent","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the window is transparent or not.\nNote that on `macOS` this requires the `macos-private-api` feature flag, enabled under `tauri.conf.json > tauri > macosPrivateApi`.\nWARNING: Using private APIs on `macOS` prevents your application from being accepted for the `App Store`."},"sources":[{"fileName":"window.ts","line":1209,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":850,"name":"url","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Remote URL or local file path to open.","text":"- URL such as `https://github.com/tauri-apps` is opened directly on a Tauri window.\n- data: URL such as `data:text/html,<html>...` is only supported with the `window-data-url` Cargo feature for the `tauri` dependency.\n- local file path or route such as `/path/to/page.html` or `/users` is appended to the application URL (the devServer URL on development, or `tauri://localhost/` and `https://tauri.localhost/` on production).\n"},"sources":[{"fileName":"window.ts","line":1177,"character":2}],"type":{"type":"intrinsic","name":"string"}},{"id":866,"name":"visible","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"Whether the window should be immediately visible upon creation or not."},"sources":[{"fileName":"window.ts","line":1213,"character":2}],"type":{"type":"intrinsic","name":"boolean"}},{"id":854,"name":"width","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The initial width."},"sources":[{"fileName":"window.ts","line":1185,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":852,"name":"x","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The initial vertical position. Only applies if `y` is also set."},"sources":[{"fileName":"window.ts","line":1181,"character":2}],"type":{"type":"intrinsic","name":"number"}},{"id":853,"name":"y","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"shortText":"The initial horizontal position. Only applies if `x` is also set."},"sources":[{"fileName":"window.ts","line":1183,"character":2}],"type":{"type":"intrinsic","name":"number"}}],"groups":[{"title":"Properties","kind":1024,"children":[868,851,867,870,863,862,855,859,858,865,857,856,860,869,861,864,850,866,854,852,853]}],"sources":[{"fileName":"window.ts","line":1169,"character":10}]},{"id":796,"name":"appWindow","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"The WebviewWindow for the current window."},"sources":[{"fileName":"window.ts","line":1160,"character":6}],"type":{"type":"reference","id":548,"name":"WebviewWindow"},"defaultValue":"..."},{"id":842,"name":"availableMonitors","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"window.ts","line":1265,"character":15}],"signatures":[{"id":843,"name":"availableMonitors","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the list of all the monitors available on the system."},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","id":844,"name":"Monitor"}}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":838,"name":"currentMonitor","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"window.ts","line":1232,"character":15}],"signatures":[{"id":839,"name":"currentMonitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the monitor on which the window currently resides.\nReturns `null` if current monitor can't be detected."},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","id":844,"name":"Monitor"},{"type":"literal","value":null}]}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]},{"id":794,"name":"getAll","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"window.ts","line":230,"character":9}],"signatures":[{"id":795,"name":"getAll","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets an instance of `WebviewWindow` for all available webview windows.","returns":"The list of WebviewWindow.\n"},"type":{"type":"array","elementType":{"type":"reference","id":548,"name":"WebviewWindow"}}}]},{"id":792,"name":"getCurrent","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"window.ts","line":218,"character":9}],"signatures":[{"id":793,"name":"getCurrent","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Get an instance of `WebviewWindow` for the current webview window.","returns":"The current WebviewWindow.\n"},"type":{"type":"reference","id":548,"name":"WebviewWindow"}}]},{"id":840,"name":"primaryMonitor","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"window.ts","line":1250,"character":15}],"signatures":[{"id":841,"name":"primaryMonitor","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Returns the primary monitor of the system.\nReturns `null` if it can't identify any monitor as a primary one."},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","id":844,"name":"Monitor"},{"type":"literal","value":null}]}],"qualifiedName":"Promise","package":"typescript","name":"Promise"}}]}],"groups":[{"title":"Enumerations","kind":8,"children":[835]},{"title":"Classes","kind":128,"children":[816,797,824,805,548,658,686]},{"title":"Interfaces","kind":256,"children":[844,849]},{"title":"Variables","kind":32,"children":[796]},{"title":"Functions","kind":64,"children":[842,838,794,792,840]}],"sources":[{"fileName":"window.ts","line":108,"character":0}]}],"groups":[{"title":"Modules","kind":2,"children":[1,8,14,29,35,66,81,160,181,214,221,231,328,329,342,354,417,423,510,530,546]}]}