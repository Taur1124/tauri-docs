---
import type { Props } from '@astrojs/starlight/props';
import Default from '@astrojs/starlight/components/Head.astro';

// Map the page url to the final image path, mostly to ensure the script handle /index pages
const imageURL = Object.fromEntries(
	Object.entries(import.meta.glob('../../content/docs/**/index.{md,mdx}')).map(([path]) => {
		path = path.replaceAll('../../content/docs', '');
		path = path.replace('.mdx', '');
		path = path.replace('.md', '');
		path = path.replace(/\/$/, '');
		const pageURL = path.replace('/index', '');
		return [pageURL, path];
	})
);

// Handle edge cases and custom images
const customImage: Record<string, string> = {
	// homepage
	'/': '/og.png',
	// blog main pages
	'/blog': '/og.png',
	'/blog/2': '/og.png',
	'/blog/3': '/og.png',
	//
	'/guides/template': '/og.png',
};

let socialImage: URL | null;

function getSocialImage() {
	let path = Astro.url.pathname.replace(/\/$/, '');

	if (path.endsWith('.png')) {
		return null;
	}

	if (customImage[path]) {
		return new URL(customImage[path], Astro.url);
	} else {
		let imagePath = (imageURL[path] || path);
		// TODO: Improve cache busting
		return new URL(`/social-images/content/docs${imagePath}.png?v=1`, Astro.url);
	}
}
socialImage = getSocialImage();
---

<!-- /* TODO: - Check if is possible dynamic generate on astro.config head without overriding Head.astro - No specific reason
              - Make sure the URL pattern matches every page and if default fallback is working.
-->
<Default {...Astro.props} />
{
	socialImage && (
		<>
			<meta name="twitter:image" content={socialImage} />
			<meta property="og:image" content={socialImage} />
		</>
	)
}
