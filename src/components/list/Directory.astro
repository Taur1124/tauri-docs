---
import config from 'virtual:starlight/user-config';
import {
	stripLeadingAndTrailingSlashes,
	ensureTrailingSlash,
} from 'node_modules/@astrojs/starlight/utils/path';
import { LinkCard, CardGrid } from '@astrojs/starlight/components';
import { routes, type Route } from 'node_modules/@astrojs/starlight/utils/routing';

interface Props {
	/**
	 * Path relative to /src - e.g "/zh-cn/features"
	 *
	 * Note: leading and trailing slashes are dropped "/features/" === "features"
	 */
	path: string;
	/**
	 *  Filter out pages by keyword - case insensitive
	 */
	filterOut?: string[];
	/**
	 * Force alphabetical order - by default it sorts by `frontmatter.sidebar.order`, then alphabetically.
	 *
	 * Use this to ignore sidebar order
	 */
	sortAlphabetically?: boolean;
}

function hasSidebarOrder(page: Route): number | undefined {
	return page.entry.data.sidebar.order;
}

function alphaSort(a: Route, b: Route): number {
	return a.entry.data.title.localeCompare(b.entry.data.title);
}

function compareOrder(a: Route, b: Route): boolean {
	return a.entry.data.sidebar.order > b.entry.data.sidebar.order;
}

let { path } = Astro.props;
const { filterOut = [], sortAlphabetically = false } = Astro.props;

const defaultLocale = config.defaultLocale.lang || 'en';
const localesList = config.isMultilingual ? Object.keys(config.locales) : [defaultLocale];

path = stripLeadingAndTrailingSlashes(path.toLowerCase());
let [currentPageLocale] = stripLeadingAndTrailingSlashes(Astro.url.pathname).split('/');

// Ensure currentPageLocale is a locale when it's page is on default locale
if (!localesList.includes(currentPageLocale)) {
	currentPageLocale = defaultLocale;
}

const locale = currentPageLocale;
const pageLang = ensureTrailingSlash(locale);

// Ensure the locale is ignore if passed on `path`
let [sliceLocale] = stripLeadingAndTrailingSlashes(path).split('/');
if (localesList.includes(sliceLocale)) {
	path = path.slice(sliceLocale.length + 1);
}
// Localize `path` to the current page locale
path = locale === defaultLocale ? path : pageLang + path;

let fallbackList: Route[] = [];
let mainList: Route[] = [];

routes.forEach((page) => {
	if (page.slug.startsWith(path)) {
		if (page.isFallback) {
			fallbackList.push(page);
		} else if (page.slug !== path) {
			mainList.push(page);
		}
	}
});

/**
 * Filter out items if @const filterOut is set
 */
if (filterOut.length > 0) {
	fallbackList = fallbackList.filter(
		(page) => !filterOut.some((val) => page.entry.data.title.includes(val))
	);
	mainList = mainList.filter(
		(page) => !filterOut.some((val) => page.entry.data.title.includes(val))
	);
}

if (!sortAlphabetically) {
	// dumb luck this works, now why?
	const sortVal = locale === defaultLocale ? 1 : -1;
	// Sort list following sidebar order
	mainList.sort((a, b) => {
		if (!hasSidebarOrder(a) && !hasSidebarOrder(b)) {
			return alphaSort(a, b);
		}
		if (compareOrder(a, b)) {
			return sortVal;
		} else {
			return -sortVal;
		}
	});
	// Sort list following sidebar order
	fallbackList.sort((a, b) => {
		if (!hasSidebarOrder(a) && !hasSidebarOrder(b)) {
			return alphaSort(a, b);
		}
		if (compareOrder(a, b)) {
			return -sortVal;
		} else {
			return sortVal;
		}
	});
} else {
	// Sort alphabetically
	mainList.sort((a, b) => alphaSort(a, b));
	fallbackList.sort((a, b) => alphaSort(a, b));
}
---

<CardGrid>
	{
		mainList.map((item) => (
			<LinkCard
				title={item.entry.data.title}
				href={`/${item.slug}`}
				description={item.entry.data.description}
			/>
		))
	}
	{
		locale !== defaultLocale &&
			fallbackList.map((item) => (
				<LinkCard
					class="fallback-badge"
					title={item.entry.data.title}
					href={`/${item.slug}`}
					description={item.entry.data.description}
				/>
			))
	}
</CardGrid>

<style>
	.fallback-badge:after {
		/* now how can this match the defaultLocale? */
		/* try with attr() */
		content: 'EN';
		vertical-align: super;
		font-size: 0.75em;
		font-weight: 700;
		margin-left: 1ch;
	}
</style>
