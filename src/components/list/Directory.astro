---
import config from 'virtual:starlight/user-config';
import {
	stripLeadingAndTrailingSlashes,
	ensureTrailingSlash,
} from 'node_modules/@astrojs/starlight/utils/path';
import { LinkCard, CardGrid } from '@astrojs/starlight/components';
import { getCollection } from 'astro:content';

interface Props {
	/**
	 * Path relative to /src - e.g "/zh-cn/features"
	 *
	 * Note: leading and trailing slashes are dropped "/features/" === "features"
	 */
	path: string;
	/**
	 *  Filter out pages by keyword - case insensitive
	 */
	filterOut?: string[];
	/**
	 * Force alphabetical order
	 */
	forceAbc?: boolean;
}

let { path } = Astro.props;
const { filterOut = [], forceAbc = false } = Astro.props;

const defaultLocale = config.defaultLocale.lang || 'en';
const localesList = config.isMultilingual ? Object.keys(config.locales) : [defaultLocale];

path = stripLeadingAndTrailingSlashes(path.toLowerCase());
let [currentPageLocale] = stripLeadingAndTrailingSlashes(Astro.url.pathname).split('/');

// Ensure currentPageLocale is a locale when it's page is on default locale
if (!localesList.includes(currentPageLocale)) {
	currentPageLocale = defaultLocale;
}

const locale = currentPageLocale;
const pageLang = ensureTrailingSlash(locale);

// Ensure the locale is ignore if passed on `path`
let [sliceLocale] = stripLeadingAndTrailingSlashes(path).split('/');
if (localesList.includes(sliceLocale)) {
	path = path.slice(sliceLocale.length + 1);
}
// Localize `path` to the current page locale
path = locale === defaultLocale ? path : pageLang + path;

// Get root url without locale (based on received path prop)
const rootUrl = locale !== defaultLocale ? path.slice(locale.length + 1) : path;

/**
 * Collections structure:
 * @const rootList contains english pages
 * @const i18nList contains chosen locale pages
 * @const fallbackList is subtraction of both
 * Final composition is @var list then and @const fallbackList
 */
const rootList = await getCollection('docs', ({ slug }) =>
	slug.startsWith(ensureTrailingSlash(rootUrl))
);
const i18nList = await getCollection('docs', ({ slug }) => {
	if (locale === defaultLocale) return false;
	return slug.startsWith(ensureTrailingSlash(path));
});
const fallbackList = rootList.filter(
	(root) => !i18nList.some((i18n) => i18n.id.replace(pageLang, '') === root.id)
);

let list = locale === defaultLocale ? rootList : i18nList;

/**
 * Filter out items if @const filterOut is set
 */
if (filterOut.length > 0) {
	list = list.filter((root) => !filterOut.some((val) => root.id.includes(val)));
}

//
if (!forceAbc) {
	// dumb luck this works, now why?
	const sortVal = locale === defaultLocale ? 1 : -1;

	// Sort list following sidebar order
	list.sort((a, b) => {
		if (a.data.sidebar.order >= b.data.sidebar.order) {
			return sortVal;
		} else {
			return -sortVal;
		}
	});

	// Sort list following sidebar order
	fallbackList.sort((a, b) => {
		if (a.data.sidebar.order > b.data.sidebar.order) {
			return -sortVal;
		} else {
			return sortVal;
		}
	});
} else {
	// Sort alphabetically
	list.sort((a, b) => a.data.title.localeCompare(b.data.title));
	fallbackList.sort((a, b) => a.data.title.localeCompare(b.data.title));
}
---

<CardGrid>
	{
		list.map((item) => (
			<LinkCard
				title={item.data.title}
				href={`/${item.slug}`}
				description={item.data.description}
			/>
		))
	}
	{
		locale !== defaultLocale &&
			fallbackList.map((item) => (
				<LinkCard
				class="fallback-badge"
				title={item.data.title}
				href={`/${item.slug}`}
				description={item.data.description}
				
				/>
			))
	}
</CardGrid>

<style>
	.fallback-badge:after {
		/* now how can this match the defaultLocale? */
		/* try with attr() */
		content: 'EN';
		vertical-align: super;
		font-size: 0.75em;
		font-weight: 700;
		margin-left: 1ch;
	}
</style>
