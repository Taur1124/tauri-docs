---
import config from 'virtual:starlight/user-config';

import {
	stripLeadingAndTrailingSlashes,
	ensureTrailingSlash,
} from 'node_modules/@astrojs/starlight/utils/path';
import { LinkCard, CardGrid } from '@astrojs/starlight/components';
import { getCollection } from 'astro:content';

interface Props {
	/**
	 * Path relative to /src - e.g "/zh-cn/features"
	 *
	 * Note: leading and trailing slashes are dropped "/features/" === "features"
	 */
	path: string;
	/**
	 * Locale e.g "zh-CN" - case insensitive
	 */
	locale: string;
	/**
	 *  Filter out pages by keyword - case insensitive
	 */
	filterOut?: string[];
}

//console.log(config.locales);

let { path, locale } = Astro.props;
const { filterOut = [] } = Astro.props;

locale = locale.toLowerCase();
path = stripLeadingAndTrailingSlashes(path);

const pageLang = locale + '/';

if (!path.startsWith(locale) && locale !== 'en') {
	path = pageLang + path;
}

const rootUrl = locale !== 'en' ? path.slice(locale.length + 1) : path;

/**
 * Filters -
 * @const rootList contains english pages
 * @const i18nList contains chosen locale pages
 * @const fallbackList is the subtraction of both
 * the final composition is @var list then and @var fallbackList
 */
const rootList = await getCollection('docs', ({ slug }) =>
	slug.startsWith(ensureTrailingSlash(rootUrl))
);
const i18nList = await getCollection('docs', ({ slug }) => {
	if (locale === 'en') return false;
	return slug.startsWith(ensureTrailingSlash(path));
});
const fallbackList = rootList.filter(
	(root) => !i18nList.some((i18n) => i18n.id.replace(pageLang, '') === root.id)
);

let list = locale === 'en' ? rootList : i18nList;

if (filterOut.length > 0) {
	list = list.filter((root) => !filterOut.some((val) => root.id.includes(val)));
}
//

// list.forEach((e) => {
// 	console.log(e.slug, e.data.title);
// });
console.log(typeof list);

// function sortlist(lis) {
// 	lis.sort((a, b) => a.data.title.localeCompare(b.data.title));
// }
const processed: Record<number, boolean> = {};

list.sort((a, b) => a.data.title.localeCompare(b.data.title));

list.forEach((e) => {
	if (!processed[e.data.sidebar.order ?? 0]) {
		if (!e.data.sidebar.order) {
			e.data.sidebar.order = 100;
		} else {
			e.data.sidebar.order += 100;
		}
		processed[e.data.sidebar.order] = true;
	}
});

list.sort((a, b) => {
	if (a.data.sidebar.order > b.data.sidebar.order) {
		return -1;
	} else {
		return 1;
	}
});

list.forEach((e) => {
	console.log(e.data.sidebar.order, e.data.title);
});
---

<CardGrid>
	{
		list.map((item) => (
			<LinkCard
				title={item.data.title}
				href={`/${item.slug}`}
				description={item.data.description}
			/>
		))
	}
	{
		locale !== 'en' &&
			fallbackList
				.sort((a, b) => a.data.title.localeCompare(b.data.title))
				.map((item) => (
					<LinkCard
						class="fallback-badge"
						title={item.data.title}
						href={`/${item.slug}`}
						description={item.data.description}
					/>
				))
	}
</CardGrid>

<style>
	.fallback-badge:after {
		content: 'EN';
		vertical-align: super;
		font-size: 0.75em;
		font-weight: 700;
		margin-left: 1ch;
	}
</style>
