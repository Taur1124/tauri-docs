---
import config from 'virtual:starlight/user-config';

import {
	stripLeadingAndTrailingSlashes,
	ensureTrailingSlash,
} from 'node_modules/@astrojs/starlight/utils/path';

import { LinkCard, CardGrid } from '@astrojs/starlight/components';
import { getCollection } from 'astro:content';

interface Props {
	/**
	 * Path relative to /src - e.g "/zh-cn/features"
	 *
	 * Note: leading and trailing slashes are dropped "/features/" === "features"
	 */
	path: string;
	/**
	 * Locale e.g "zh-CN" - case insensitive
	 */
	locale: string;
	/**
	 *  Filter out pages by keyword - case insensitive
	 */
	filterOut?: string[];
	/**
	 * Force alphabetical order
	 *
	 */
	forceAbc?: boolean;
}
//console.log(config.locales);

let { path, locale } = Astro.props;
const { filterOut = [], forceAbc = false } = Astro.props;

// Sanitize input
locale = stripLeadingAndTrailingSlashes(locale.toLowerCase());
path = stripLeadingAndTrailingSlashes(path.toLowerCase());

const pageLang = ensureTrailingSlash(locale);

// Ensure path is localized
if (!path.startsWith(locale) && locale !== 'en') {
	path = pageLang + path;
}

// Define root url without locale
const rootUrl = locale !== 'en' ? path.slice(locale.length + 1) : path;

/**
 * Collections structure:
 * @const rootList contains english pages
 * @const i18nList contains chosen locale pages
 * @const fallbackList is subtraction of both
 * Final composition is @var list then and @const fallbackList
 */
const rootList = await getCollection('docs', ({ slug }) =>
	slug.startsWith(ensureTrailingSlash(rootUrl))
);
const i18nList = await getCollection('docs', ({ slug }) => {
	if (locale === 'en') return false;
	return slug.startsWith(ensureTrailingSlash(path));
});
const fallbackList = rootList.filter(
	(root) => !i18nList.some((i18n) => i18n.id.replace(pageLang, '') === root.id)
);

let list = locale === 'en' ? rootList : i18nList;

/**
 * Filter out items if @const filterOut is set
 */
if (filterOut.length > 0) {
	list = list.filter((root) => !filterOut.some((val) => root.id.includes(val)));
}
//
if (!forceAbc) {
	// Sort list to follow sidebar rules
	list.sort((a, b) => {
		if (a.data.sidebar.order >= b.data.sidebar.order) {
			return 1;
		} else {
			return -1;
		}
	});

	// Sort list to follow sidebar rules
	fallbackList.sort((a, b) => {
		if (a.data.sidebar.order > b.data.sidebar.order) {
			return 1;
		} else {
			return -1;
		}
	});
} else {
	list.sort((a, b) => a.data.title.localeCompare(b.data.title));
	fallbackList.sort((a, b) => a.data.title.localeCompare(b.data.title));
}
---

<CardGrid>
	{
		list.map((item) => (
			<LinkCard
				title={item.data.title}
				href={`/${item.slug}`}
				description={item.data.description}
			/>
		))
	}
	{
		locale !== 'en' &&
			fallbackList.map((item) => (
				<LinkCard
					class="fallback-badge"
					title={item.data.title}
					href={`/${item.slug}`}
					description={item.data.description}
				/>
			))
	}
</CardGrid>

<style>
	.fallback-badge:after {
		content: 'EN';
		vertical-align: super;
		font-size: 0.75em;
		font-weight: 700;
		margin-left: 1ch;
	}
</style>
