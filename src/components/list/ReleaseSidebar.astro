---
import { stripLeadingAndTrailingSlashes } from 'node_modules/@astrojs/starlight/utils/path';
import { routes, type Route } from 'node_modules/@astrojs/starlight/utils/routing';
import { Icon } from '@astrojs/starlight/components';

interface Props {
	/**
	 * Package name
	 */
	packageName: string;
	/**
	 * Slug relative to /src - e.g "/zh-cn/features"
	 *
	 * Note: leading and trailing slashes are dropped "/features/" === "features"
	 */
	slug: string;
	/**
	 *  Filter out pages by title - case insensitive
	 */
	filterOutByTitle?: string[];
	/**
	 *  Filter out pages by file name - case insensitive
	 */
	filterOutByFileName?: string[];
}

let { slug } = Astro.props;
const { filterOutByTitle = [], filterOutByFileName = [], packageName } = Astro.props;

slug = stripLeadingAndTrailingSlashes(slug.toLowerCase());

let mainList: Route[] = [];

routes.forEach((page) => {
	// `page.slug` is the slug of the current page being looped,
	// `slug` is this component prop
	if (page.slug.startsWith(slug + '/')) {
		mainList.push(page);
	}
});

/**
 * Filter items if any filter is set
 */

if (filterOutByTitle.length > 0) {
	mainList = mainList.filter(
		(page) => !filterOutByTitle.some((val) => page.entry.data.title.includes(val))
	);
}

if (filterOutByFileName.length > 0) {
	mainList = mainList.filter(
		(page) => !filterOutByFileName.some((val) => page.entry.id.includes(val))
	);
}

function sortVersions(a: Route, b: Route): number {
	return a.entry.data.title.localeCompare(b.entry.data.title);
}
mainList.sort((a, b) => sortVersions(b, a));
---

<mobile-release-list>
	<nav aria-labelledby="mobile-release-list">
		<details>
			<summary id="mobile-release-list" class="sl-flex">
				<div class="toggle sl-flex">
					Release List:
					<span class="display-current">{packageName}</span>
					<Icon name={'right-caret'} class="caret" size="1rem" />
				</div>
			</summary>
			<div class="dropdown">
				<ul>
					{
						mainList.map((item) => (
							<li>
								<a href={`/${item.slug}`}> {item.entry.data.description}</a>
							</li>
						))
					}
				</ul>
			</div>
		</details>
	</nav>
</mobile-release-list>

<script>
	// Taken from starlight's mobile TOC
	class MobileReleaseList extends HTMLElement {
		constructor() {
			super();
			const details = this.querySelector('details');
			if (!details) return;
			const closeToC = () => {
				details.open = false;
			};

			// Close the table of contents when a user clicks outside of it.
			window.addEventListener('click', (e) => {
				if (!details.contains(e.target as Node)) closeToC();
			});
			// Or when they press the escape key.
			window.addEventListener('keydown', (e) => {
				if (e.key === 'Escape' && details.open) {
					const hasFocus = details.contains(document.activeElement);
					closeToC();
					if (hasFocus) {
						const summary = details.querySelector('summary');
						if (summary) summary.focus();
					}
				}
			});
		}
	}

	customElements.define('mobile-release-list', MobileReleaseList);
</script>

<style>
	nav {
		width: fit-content;
	}
	/* Taken from starlight's mobile TOC */
	summary {
		padding-bottom: 1rem;
		gap: 0.5rem;
		align-items: center;
		font-size: var(--sl-text-xs);
		outline-offset: var(--sl-outline-offset-inside);
	}
	summary::marker,
	summary::-webkit-details-marker {
		display: none;
	}

	.toggle {
		z-index: 3;
		flex-shrink: 0;
		gap: 1rem;
		align-items: center;
		justify-content: space-between;
		border: 1px solid var(--sl-color-gray-5);
		border-radius: 0.5rem;
		padding-block: 0.5rem;
		padding-inline-start: 0.75rem;
		padding-inline-end: 0.5rem;
		background-color: var(--sl-color-gray-6);
		user-select: none;
		cursor: pointer;
	}
	details[open] .toggle {
		color: var(--sl-color-white);
		border-color: var(--sl-color-accent);
	}
	details .toggle:hover {
		color: var(--sl-color-white);
		border-color: var(--sl-color-gray-2);
	}
	details[open] .caret {
		transform: rotateZ(90deg);
	}
	.display-current {
		white-space: nowrap;
		text-overflow: ellipsis;
		overflow: hidden;
		color: var(--sl-color-white);
	}
	.dropdown {
		--border: 1px;
		z-index: 2;
		row-gap: 1em;
		position: absolute;
		border-top-left-radius: 0.5rem;
		padding-inline: 0.75rem;
		padding-top: 1em;
		margin-top: -1em !important;
		border: var(--border) solid var(--sl-color-gray-5);
		max-height: calc(85vh - var(--sl-nav-height) - var(--sl-mobile-toc-height));
		overflow-y: auto;
		background-color: var(--sl-color-black);
		box-shadow: var(--sl-shadow-md);
		overscroll-behavior: contain;
		background-color: var(--sl-color-bg-sidebar);
	}

	ul {
		all: unset;
		list-style: none;
	}
	li {
		all: unset;
	}
	a {
		display: block;
		padding-block: 0.5rem;
		line-height: 1.25;
	}
</style>
