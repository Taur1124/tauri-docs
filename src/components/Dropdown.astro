---
import crypto from "crypto";
interface Props {
  btnClass?: string;
  alignment?: "leading" | "trailing";
}

const uuid = crypto.randomUUID();

const { btnClass, alignment } = Astro.props;
---

<div class="relative">
  <button class=`button-${uuid} ${btnClass}`>
    <slot name="toggle" />
  </button>
  <dialog
    class:list={[
      `dialog-${uuid}`,
      "bg-base-300 rounded absolute w-max max-w-[90vw] overflow-y-auto max-h-[calc(100svh-(var(--nav-height)+32px))] styled-scrollbar",
      alignment === "trailing" ? "right-0" : "left-0",
    ]}
  >
    <slot name="content" />
  </dialog>
</div>
<style>
  dialog {
    inset-inline-start: unset;
    inset-inline-end: unset;
  }
</style>

<script define:vars={{ uuid }}>
const button = document.querySelector(`.button-${uuid}`);
const dialog = document.querySelector(`.dialog-${uuid}`);
const closeButton = (e) => {
  const dimentions = dialog.getBoundingClientRect();
  if (
    e.clientX < dimentions.left ||
    e.clientX > dimentions.right ||
    e.clientY < dimentions.top ||
    e.clientY > dimentions.bottom
  ) {
    dialog.close();
  }
};

button?.addEventListener("mousedown", (e) => {
  if (dialog.open) {
    closeButton(e);
  } else {
    dialog.show();
  }
});
button.addEventListener("mouseup", () => {
  document.addEventListener(
    "mousedown",
    (e) => {
      closeButton(e);
    },
    { once: true }
  );
});
</script>
