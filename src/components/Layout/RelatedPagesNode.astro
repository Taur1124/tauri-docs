---
import type { CollectionEntry, getCollection } from 'astro:content'
import { l } from 'astro-i18n'

interface Props<C extends Parameters<typeof getCollection>[0]> {
  entries: CollectionEntry<C>[]
  baseUrl?: string
}

const { entries, baseUrl } = Astro.props

entries.sort((a: CollectionEntry<'docs-1'>, b: CollectionEntry<'docs-1'>) => {
  if (a.data.position) {
    if (b.data.position) {
      return a.data.position - b.data.position
    }
    // Sort A first
    return -1
  }

  // Sort on title
  if (a.data.title) {
    return a.data.title.localeCompare(b.data.title || b.slug)
  }

  // Sort on slug
  return a.slug.localeCompare(b.data.title || b.slug)
})

function addBaseUrl(url: string) {
  if (baseUrl) {
    return `/${baseUrl}/${url.replace(/^\\+$/g, '')}`
  }
  return url
}

function trimSlashes(url: string) {
  return url.replace(/^\/+|\/+$/g, '')
}
---

{
  entries.map((entry: any) => (
    <li>
      <a
        href={addBaseUrl(entry.slug)}
        class:list={[
          'list-item',
          {
            'list-item-active':
              trimSlashes(addBaseUrl(entry.slug)) ===
              trimSlashes(Astro.url.pathname),
          },
        ]}
      >
        {entry.data.title || entry.slug}
      </a>
      {entry._children && (
        <ul class="pl-2">
          <Astro.self entries={entry._children} baseUrl={baseUrl} />
        </ul>
      )}
    </li>
  ))
}
